// Package errors contains errors for the domain "neb".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawrgo "github.com/puppetlabs/errawr-go"
	impl "github.com/puppetlabs/errawr-go/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawrgo.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "neb",
	Title: "Nebula",
}

// ClientSection defines a section of errors with the following scope:
// Client errors
var ClientSection = &impl.ErrorSection{
	Key:   "client",
	Title: "Client errors",
}

// ClientCreateSessionErrorCode is the code for an instance of "create_session_error".
const ClientCreateSessionErrorCode = "neb_client_create_session_error"

// IsClientCreateSessionError tests whether a given error is an instance of "create_session_error".
func IsClientCreateSessionError(err errawrgo.Error) bool {
	return err != nil && err.Is(ClientCreateSessionErrorCode)
}

// IsClientCreateSessionError tests whether a given error is an instance of "create_session_error".
func (External) IsClientCreateSessionError(err errawrgo.Error) bool {
	return IsClientCreateSessionError(err)
}

// ClientCreateSessionErrorBuilder is a builder for "create_session_error" errors.
type ClientCreateSessionErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "create_session_error" from this builder.
func (b *ClientCreateSessionErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching your API token",
		Technical: "there was an error fetching your API token",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "create_session_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Create session error",
		Version:          1,
	}
}

// NewClientCreateSessionErrorBuilder creates a new error builder for the code "create_session_error".
func NewClientCreateSessionErrorBuilder() *ClientCreateSessionErrorBuilder {
	return &ClientCreateSessionErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientCreateSessionError creates a new error with the code "create_session_error".
func NewClientCreateSessionError() Error {
	return NewClientCreateSessionErrorBuilder().Build()
}

// ClientCreateWorkflowErrorCode is the code for an instance of "create_workflow_error".
const ClientCreateWorkflowErrorCode = "neb_client_create_workflow_error"

// IsClientCreateWorkflowError tests whether a given error is an instance of "create_workflow_error".
func IsClientCreateWorkflowError(err errawrgo.Error) bool {
	return err != nil && err.Is(ClientCreateWorkflowErrorCode)
}

// IsClientCreateWorkflowError tests whether a given error is an instance of "create_workflow_error".
func (External) IsClientCreateWorkflowError(err errawrgo.Error) bool {
	return IsClientCreateWorkflowError(err)
}

// ClientCreateWorkflowErrorBuilder is a builder for "create_workflow_error" errors.
type ClientCreateWorkflowErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "create_workflow_error" from this builder.
func (b *ClientCreateWorkflowErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error creating the workflow",
		Technical: "there was an error creating the workflow",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "create_workflow_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Create workflow error",
		Version:          1,
	}
}

// NewClientCreateWorkflowErrorBuilder creates a new error builder for the code "create_workflow_error".
func NewClientCreateWorkflowErrorBuilder() *ClientCreateWorkflowErrorBuilder {
	return &ClientCreateWorkflowErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientCreateWorkflowError creates a new error with the code "create_workflow_error".
func NewClientCreateWorkflowError() Error {
	return NewClientCreateWorkflowErrorBuilder().Build()
}

// ClientInvalidAPIHostCode is the code for an instance of "invalid_api_host".
const ClientInvalidAPIHostCode = "neb_client_invalid_api_host"

// IsClientInvalidAPIHost tests whether a given error is an instance of "invalid_api_host".
func IsClientInvalidAPIHost(err errawrgo.Error) bool {
	return err != nil && err.Is(ClientInvalidAPIHostCode)
}

// IsClientInvalidAPIHost tests whether a given error is an instance of "invalid_api_host".
func (External) IsClientInvalidAPIHost(err errawrgo.Error) bool {
	return IsClientInvalidAPIHost(err)
}

// ClientInvalidAPIHostBuilder is a builder for "invalid_api_host" errors.
type ClientInvalidAPIHostBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_api_host" from this builder.
func (b *ClientInvalidAPIHostBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "{{ host }} is not a valid api url",
		Technical: "{{ host }} is not a valid api url",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_api_host",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Invalid API host",
		Version:          1,
	}
}

// NewClientInvalidAPIHostBuilder creates a new error builder for the code "invalid_api_host".
func NewClientInvalidAPIHostBuilder(host string) *ClientInvalidAPIHostBuilder {
	return &ClientInvalidAPIHostBuilder{arguments: impl.ErrorArguments{"host": impl.NewErrorArgument(host, "the host url given that was not valid")}}
}

// NewClientInvalidAPIHost creates a new error with the code "invalid_api_host".
func NewClientInvalidAPIHost(host string) Error {
	return NewClientInvalidAPIHostBuilder(host).Build()
}

// ClientListWorkflowsErrorCode is the code for an instance of "list_workflows_error".
const ClientListWorkflowsErrorCode = "neb_client_list_workflows_error"

// IsClientListWorkflowsError tests whether a given error is an instance of "list_workflows_error".
func IsClientListWorkflowsError(err errawrgo.Error) bool {
	return err != nil && err.Is(ClientListWorkflowsErrorCode)
}

// IsClientListWorkflowsError tests whether a given error is an instance of "list_workflows_error".
func (External) IsClientListWorkflowsError(err errawrgo.Error) bool {
	return IsClientListWorkflowsError(err)
}

// ClientListWorkflowsErrorBuilder is a builder for "list_workflows_error" errors.
type ClientListWorkflowsErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "list_workflows_error" from this builder.
func (b *ClientListWorkflowsErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching workflows",
		Technical: "there was an error fetching workflows",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "list_workflows_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "List workflows error",
		Version:          1,
	}
}

// NewClientListWorkflowsErrorBuilder creates a new error builder for the code "list_workflows_error".
func NewClientListWorkflowsErrorBuilder() *ClientListWorkflowsErrorBuilder {
	return &ClientListWorkflowsErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientListWorkflowsError creates a new error with the code "list_workflows_error".
func NewClientListWorkflowsError() Error {
	return NewClientListWorkflowsErrorBuilder().Build()
}

// ClientMissingEmailErrorCode is the code for an instance of "missing_email_error".
const ClientMissingEmailErrorCode = "neb_client_missing_email_error"

// IsClientMissingEmailError tests whether a given error is an instance of "missing_email_error".
func IsClientMissingEmailError(err errawrgo.Error) bool {
	return err != nil && err.Is(ClientMissingEmailErrorCode)
}

// IsClientMissingEmailError tests whether a given error is an instance of "missing_email_error".
func (External) IsClientMissingEmailError(err errawrgo.Error) bool {
	return IsClientMissingEmailError(err)
}

// ClientMissingEmailErrorBuilder is a builder for "missing_email_error" errors.
type ClientMissingEmailErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "missing_email_error" from this builder.
func (b *ClientMissingEmailErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "{{ msg }}",
		Technical: "{{ msg }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "missing_email_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Missing email error",
		Version:          1,
	}
}

// NewClientMissingEmailErrorBuilder creates a new error builder for the code "missing_email_error".
func NewClientMissingEmailErrorBuilder(msg string) *ClientMissingEmailErrorBuilder {
	return &ClientMissingEmailErrorBuilder{arguments: impl.ErrorArguments{"msg": impl.NewErrorArgument(msg, "a message about what the issue was")}}
}

// NewClientMissingEmailError creates a new error with the code "missing_email_error".
func NewClientMissingEmailError(msg string) Error {
	return NewClientMissingEmailErrorBuilder(msg).Build()
}

// ClientNotLoggedInCode is the code for an instance of "not_logged_in".
const ClientNotLoggedInCode = "neb_client_not_logged_in"

// IsClientNotLoggedIn tests whether a given error is an instance of "not_logged_in".
func IsClientNotLoggedIn(err errawrgo.Error) bool {
	return err != nil && err.Is(ClientNotLoggedInCode)
}

// IsClientNotLoggedIn tests whether a given error is an instance of "not_logged_in".
func (External) IsClientNotLoggedIn(err errawrgo.Error) bool {
	return IsClientNotLoggedIn(err)
}

// ClientNotLoggedInBuilder is a builder for "not_logged_in" errors.
type ClientNotLoggedInBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "not_logged_in" from this builder.
func (b *ClientNotLoggedInBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "not logged in",
		Technical: "not logged in",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "not_logged_in",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Not logged in",
		Version:          1,
	}
}

// NewClientNotLoggedInBuilder creates a new error builder for the code "not_logged_in".
func NewClientNotLoggedInBuilder() *ClientNotLoggedInBuilder {
	return &ClientNotLoggedInBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientNotLoggedIn creates a new error with the code "not_logged_in".
func NewClientNotLoggedIn() Error {
	return NewClientNotLoggedInBuilder().Build()
}

// ClientPasswordErrorCode is the code for an instance of "password_error".
const ClientPasswordErrorCode = "neb_client_password_error"

// IsClientPasswordError tests whether a given error is an instance of "password_error".
func IsClientPasswordError(err errawrgo.Error) bool {
	return err != nil && err.Is(ClientPasswordErrorCode)
}

// IsClientPasswordError tests whether a given error is an instance of "password_error".
func (External) IsClientPasswordError(err errawrgo.Error) bool {
	return IsClientPasswordError(err)
}

// ClientPasswordErrorBuilder is a builder for "password_error" errors.
type ClientPasswordErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "password_error" from this builder.
func (b *ClientPasswordErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "{{ msg }}",
		Technical: "{{ msg }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "password_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Password error",
		Version:          1,
	}
}

// NewClientPasswordErrorBuilder creates a new error builder for the code "password_error".
func NewClientPasswordErrorBuilder(msg string) *ClientPasswordErrorBuilder {
	return &ClientPasswordErrorBuilder{arguments: impl.ErrorArguments{"msg": impl.NewErrorArgument(msg, "a message about what the issue was")}}
}

// NewClientPasswordError creates a new error with the code "password_error".
func NewClientPasswordError(msg string) Error {
	return NewClientPasswordErrorBuilder(msg).Build()
}

// ClientRunWorkflowErrorCode is the code for an instance of "run_workflow_error".
const ClientRunWorkflowErrorCode = "neb_client_run_workflow_error"

// IsClientRunWorkflowError tests whether a given error is an instance of "run_workflow_error".
func IsClientRunWorkflowError(err errawrgo.Error) bool {
	return err != nil && err.Is(ClientRunWorkflowErrorCode)
}

// IsClientRunWorkflowError tests whether a given error is an instance of "run_workflow_error".
func (External) IsClientRunWorkflowError(err errawrgo.Error) bool {
	return IsClientRunWorkflowError(err)
}

// ClientRunWorkflowErrorBuilder is a builder for "run_workflow_error" errors.
type ClientRunWorkflowErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "run_workflow_error" from this builder.
func (b *ClientRunWorkflowErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error running the workflow",
		Technical: "there was an error running the workflow",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "run_workflow_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Run workflow error",
		Version:          1,
	}
}

// NewClientRunWorkflowErrorBuilder creates a new error builder for the code "run_workflow_error".
func NewClientRunWorkflowErrorBuilder() *ClientRunWorkflowErrorBuilder {
	return &ClientRunWorkflowErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientRunWorkflowError creates a new error with the code "run_workflow_error".
func NewClientRunWorkflowError() Error {
	return NewClientRunWorkflowErrorBuilder().Build()
}

// ClientTokenLoadErrorCode is the code for an instance of "token_load_error".
const ClientTokenLoadErrorCode = "neb_client_token_load_error"

// IsClientTokenLoadError tests whether a given error is an instance of "token_load_error".
func IsClientTokenLoadError(err errawrgo.Error) bool {
	return err != nil && err.Is(ClientTokenLoadErrorCode)
}

// IsClientTokenLoadError tests whether a given error is an instance of "token_load_error".
func (External) IsClientTokenLoadError(err errawrgo.Error) bool {
	return IsClientTokenLoadError(err)
}

// ClientTokenLoadErrorBuilder is a builder for "token_load_error" errors.
type ClientTokenLoadErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "token_load_error" from this builder.
func (b *ClientTokenLoadErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error loading the auth token",
		Technical: "there was an error loading the auth token",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "token_load_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Token load error",
		Version:          1,
	}
}

// NewClientTokenLoadErrorBuilder creates a new error builder for the code "token_load_error".
func NewClientTokenLoadErrorBuilder() *ClientTokenLoadErrorBuilder {
	return &ClientTokenLoadErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientTokenLoadError creates a new error with the code "token_load_error".
func NewClientTokenLoadError() Error {
	return NewClientTokenLoadErrorBuilder().Build()
}

// ClientTokenStorageErrorCode is the code for an instance of "token_storage_error".
const ClientTokenStorageErrorCode = "neb_client_token_storage_error"

// IsClientTokenStorageError tests whether a given error is an instance of "token_storage_error".
func IsClientTokenStorageError(err errawrgo.Error) bool {
	return err != nil && err.Is(ClientTokenStorageErrorCode)
}

// IsClientTokenStorageError tests whether a given error is an instance of "token_storage_error".
func (External) IsClientTokenStorageError(err errawrgo.Error) bool {
	return IsClientTokenStorageError(err)
}

// ClientTokenStorageErrorBuilder is a builder for "token_storage_error" errors.
type ClientTokenStorageErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "token_storage_error" from this builder.
func (b *ClientTokenStorageErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error storing the auth token",
		Technical: "there was an error storing the auth token",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "token_storage_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Token storage error",
		Version:          1,
	}
}

// NewClientTokenStorageErrorBuilder creates a new error builder for the code "token_storage_error".
func NewClientTokenStorageErrorBuilder() *ClientTokenStorageErrorBuilder {
	return &ClientTokenStorageErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientTokenStorageError creates a new error with the code "token_storage_error".
func NewClientTokenStorageError() Error {
	return NewClientTokenStorageErrorBuilder().Build()
}

// ClientValidateWorkflowErrorCode is the code for an instance of "validate_workflow_error".
const ClientValidateWorkflowErrorCode = "neb_client_validate_workflow_error"

// IsClientValidateWorkflowError tests whether a given error is an instance of "validate_workflow_error".
func IsClientValidateWorkflowError(err errawrgo.Error) bool {
	return err != nil && err.Is(ClientValidateWorkflowErrorCode)
}

// IsClientValidateWorkflowError tests whether a given error is an instance of "validate_workflow_error".
func (External) IsClientValidateWorkflowError(err errawrgo.Error) bool {
	return IsClientValidateWorkflowError(err)
}

// ClientValidateWorkflowErrorBuilder is a builder for "validate_workflow_error" errors.
type ClientValidateWorkflowErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "validate_workflow_error" from this builder.
func (b *ClientValidateWorkflowErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error validating the workflow",
		Technical: "there was an error validating the workflow",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "validate_workflow_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Validate workflow error",
		Version:          1,
	}
}

// NewClientValidateWorkflowErrorBuilder creates a new error builder for the code "validate_workflow_error".
func NewClientValidateWorkflowErrorBuilder() *ClientValidateWorkflowErrorBuilder {
	return &ClientValidateWorkflowErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientValidateWorkflowError creates a new error with the code "validate_workflow_error".
func NewClientValidateWorkflowError() Error {
	return NewClientValidateWorkflowErrorBuilder().Build()
}

// PlanSection defines a section of errors with the following scope:
// Plan errors
var PlanSection = &impl.ErrorSection{
	Key:   "plan",
	Title: "Plan errors",
}

// PlanFileNotFoundCode is the code for an instance of "file_not_found".
const PlanFileNotFoundCode = "neb_plan_file_not_found"

// IsPlanFileNotFound tests whether a given error is an instance of "file_not_found".
func IsPlanFileNotFound(err errawrgo.Error) bool {
	return err != nil && err.Is(PlanFileNotFoundCode)
}

// IsPlanFileNotFound tests whether a given error is an instance of "file_not_found".
func (External) IsPlanFileNotFound(err errawrgo.Error) bool {
	return IsPlanFileNotFound(err)
}

// PlanFileNotFoundBuilder is a builder for "file_not_found" errors.
type PlanFileNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "file_not_found" from this builder.
func (b *PlanFileNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "filepath `{{path}}` does not exist",
		Technical: "filepath `{{path}}` does not exist",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "file_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     PlanSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "File not found",
		Version:          1,
	}
}

// NewPlanFileNotFoundBuilder creates a new error builder for the code "file_not_found".
func NewPlanFileNotFoundBuilder(path string) *PlanFileNotFoundBuilder {
	return &PlanFileNotFoundBuilder{arguments: impl.ErrorArguments{"path": impl.NewErrorArgument(path, "the path that doesn't exist")}}
}

// NewPlanFileNotFound creates a new error with the code "file_not_found".
func NewPlanFileNotFound(path string) Error {
	return NewPlanFileNotFoundBuilder(path).Build()
}

// PlanLoaderErrorCode is the code for an instance of "loader_error".
const PlanLoaderErrorCode = "neb_plan_loader_error"

// IsPlanLoaderError tests whether a given error is an instance of "loader_error".
func IsPlanLoaderError(err errawrgo.Error) bool {
	return err != nil && err.Is(PlanLoaderErrorCode)
}

// IsPlanLoaderError tests whether a given error is an instance of "loader_error".
func (External) IsPlanLoaderError(err errawrgo.Error) bool {
	return IsPlanLoaderError(err)
}

// PlanLoaderErrorBuilder is a builder for "loader_error" errors.
type PlanLoaderErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "loader_error" from this builder.
func (b *PlanLoaderErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "an error occurred while loading the plan",
		Technical: "an error occurred while loading the plan",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "loader_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     PlanSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Loader error",
		Version:          1,
	}
}

// NewPlanLoaderErrorBuilder creates a new error builder for the code "loader_error".
func NewPlanLoaderErrorBuilder() *PlanLoaderErrorBuilder {
	return &PlanLoaderErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewPlanLoaderError creates a new error with the code "loader_error".
func NewPlanLoaderError() Error {
	return NewPlanLoaderErrorBuilder().Build()
}

// PlanWorkflowNotFoundCode is the code for an instance of "workflow_not_found".
const PlanWorkflowNotFoundCode = "neb_plan_workflow_not_found"

// IsPlanWorkflowNotFound tests whether a given error is an instance of "workflow_not_found".
func IsPlanWorkflowNotFound(err errawrgo.Error) bool {
	return err != nil && err.Is(PlanWorkflowNotFoundCode)
}

// IsPlanWorkflowNotFound tests whether a given error is an instance of "workflow_not_found".
func (External) IsPlanWorkflowNotFound(err errawrgo.Error) bool {
	return IsPlanWorkflowNotFound(err)
}

// PlanWorkflowNotFoundBuilder is a builder for "workflow_not_found" errors.
type PlanWorkflowNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "workflow_not_found" from this builder.
func (b *PlanWorkflowNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "workflow {{ name }} was not found and there is no default",
		Technical: "workflow {{ name }} was not found and there is no default",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "workflow_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     PlanSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Workflow not found",
		Version:          1,
	}
}

// NewPlanWorkflowNotFoundBuilder creates a new error builder for the code "workflow_not_found".
func NewPlanWorkflowNotFoundBuilder(name string) *PlanWorkflowNotFoundBuilder {
	return &PlanWorkflowNotFoundBuilder{arguments: impl.ErrorArguments{"name": impl.NewErrorArgument(name, "the name of the workflow")}}
}

// NewPlanWorkflowNotFound creates a new error with the code "workflow_not_found".
func NewPlanWorkflowNotFound(name string) Error {
	return NewPlanWorkflowNotFoundBuilder(name).Build()
}

// WorkflowSection defines a section of errors with the following scope:
// Workflow errors
var WorkflowSection = &impl.ErrorSection{
	Key:   "workflow",
	Title: "Workflow errors",
}

// WorkflowCliFlagErrorCode is the code for an instance of "cli_flag_error".
const WorkflowCliFlagErrorCode = "neb_workflow_cli_flag_error"

// IsWorkflowCliFlagError tests whether a given error is an instance of "cli_flag_error".
func IsWorkflowCliFlagError(err errawrgo.Error) bool {
	return err != nil && err.Is(WorkflowCliFlagErrorCode)
}

// IsWorkflowCliFlagError tests whether a given error is an instance of "cli_flag_error".
func (External) IsWorkflowCliFlagError(err errawrgo.Error) bool {
	return IsWorkflowCliFlagError(err)
}

// WorkflowCliFlagErrorBuilder is a builder for "cli_flag_error" errors.
type WorkflowCliFlagErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "cli_flag_error" from this builder.
func (b *WorkflowCliFlagErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "could not validate flag {{ flag }}: {{ msg }}",
		Technical: "could not validate flag {{ flag }}: {{ msg }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "cli_flag_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "CLI flag error",
		Version:          1,
	}
}

// NewWorkflowCliFlagErrorBuilder creates a new error builder for the code "cli_flag_error".
func NewWorkflowCliFlagErrorBuilder(flag string, msg string) *WorkflowCliFlagErrorBuilder {
	return &WorkflowCliFlagErrorBuilder{arguments: impl.ErrorArguments{
		"flag": impl.NewErrorArgument(flag, "the name of the flag"),
		"msg":  impl.NewErrorArgument(msg, "a message about what went wrong"),
	}}
}

// NewWorkflowCliFlagError creates a new error with the code "cli_flag_error".
func NewWorkflowCliFlagError(flag string, msg string) Error {
	return NewWorkflowCliFlagErrorBuilder(flag, msg).Build()
}

// WorkflowFileNotFoundCode is the code for an instance of "file_not_found".
const WorkflowFileNotFoundCode = "neb_workflow_file_not_found"

// IsWorkflowFileNotFound tests whether a given error is an instance of "file_not_found".
func IsWorkflowFileNotFound(err errawrgo.Error) bool {
	return err != nil && err.Is(WorkflowFileNotFoundCode)
}

// IsWorkflowFileNotFound tests whether a given error is an instance of "file_not_found".
func (External) IsWorkflowFileNotFound(err errawrgo.Error) bool {
	return IsWorkflowFileNotFound(err)
}

// WorkflowFileNotFoundBuilder is a builder for "file_not_found" errors.
type WorkflowFileNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "file_not_found" from this builder.
func (b *WorkflowFileNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "filepath `{{path}}` does not exist",
		Technical: "filepath `{{path}}` does not exist",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "file_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "File not found",
		Version:          1,
	}
}

// NewWorkflowFileNotFoundBuilder creates a new error builder for the code "file_not_found".
func NewWorkflowFileNotFoundBuilder(path string) *WorkflowFileNotFoundBuilder {
	return &WorkflowFileNotFoundBuilder{arguments: impl.ErrorArguments{"path": impl.NewErrorArgument(path, "the path that doesn't exist")}}
}

// NewWorkflowFileNotFound creates a new error with the code "file_not_found".
func NewWorkflowFileNotFound(path string) Error {
	return NewWorkflowFileNotFoundBuilder(path).Build()
}

// WorkflowLoaderErrorCode is the code for an instance of "loader_error".
const WorkflowLoaderErrorCode = "neb_workflow_loader_error"

// IsWorkflowLoaderError tests whether a given error is an instance of "loader_error".
func IsWorkflowLoaderError(err errawrgo.Error) bool {
	return err != nil && err.Is(WorkflowLoaderErrorCode)
}

// IsWorkflowLoaderError tests whether a given error is an instance of "loader_error".
func (External) IsWorkflowLoaderError(err errawrgo.Error) bool {
	return IsWorkflowLoaderError(err)
}

// WorkflowLoaderErrorBuilder is a builder for "loader_error" errors.
type WorkflowLoaderErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "loader_error" from this builder.
func (b *WorkflowLoaderErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "an error occurred while loading the workflow",
		Technical: "an error occurred while loading the workflow",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "loader_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Loader error",
		Version:          1,
	}
}

// NewWorkflowLoaderErrorBuilder creates a new error builder for the code "loader_error".
func NewWorkflowLoaderErrorBuilder() *WorkflowLoaderErrorBuilder {
	return &WorkflowLoaderErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowLoaderError creates a new error with the code "loader_error".
func NewWorkflowLoaderError() Error {
	return NewWorkflowLoaderErrorBuilder().Build()
}

// WorkflowMissingFilepathErrorCode is the code for an instance of "missing_filepath_error".
const WorkflowMissingFilepathErrorCode = "neb_workflow_missing_filepath_error"

// IsWorkflowMissingFilepathError tests whether a given error is an instance of "missing_filepath_error".
func IsWorkflowMissingFilepathError(err errawrgo.Error) bool {
	return err != nil && err.Is(WorkflowMissingFilepathErrorCode)
}

// IsWorkflowMissingFilepathError tests whether a given error is an instance of "missing_filepath_error".
func (External) IsWorkflowMissingFilepathError(err errawrgo.Error) bool {
	return IsWorkflowMissingFilepathError(err)
}

// WorkflowMissingFilepathErrorBuilder is a builder for "missing_filepath_error" errors.
type WorkflowMissingFilepathErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "missing_filepath_error" from this builder.
func (b *WorkflowMissingFilepathErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "filepath is required",
		Technical: "filepath is required",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "missing_filepath_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Missing filepath error",
		Version:          1,
	}
}

// NewWorkflowMissingFilepathErrorBuilder creates a new error builder for the code "missing_filepath_error".
func NewWorkflowMissingFilepathErrorBuilder() *WorkflowMissingFilepathErrorBuilder {
	return &WorkflowMissingFilepathErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowMissingFilepathError creates a new error with the code "missing_filepath_error".
func NewWorkflowMissingFilepathError() Error {
	return NewWorkflowMissingFilepathErrorBuilder().Build()
}

// WorkflowNoCommandToExecuteErrorCode is the code for an instance of "no_command_to_execute_error".
const WorkflowNoCommandToExecuteErrorCode = "neb_workflow_no_command_to_execute_error"

// IsWorkflowNoCommandToExecuteError tests whether a given error is an instance of "no_command_to_execute_error".
func IsWorkflowNoCommandToExecuteError(err errawrgo.Error) bool {
	return err != nil && err.Is(WorkflowNoCommandToExecuteErrorCode)
}

// IsWorkflowNoCommandToExecuteError tests whether a given error is an instance of "no_command_to_execute_error".
func (External) IsWorkflowNoCommandToExecuteError(err errawrgo.Error) bool {
	return IsWorkflowNoCommandToExecuteError(err)
}

// WorkflowNoCommandToExecuteErrorBuilder is a builder for "no_command_to_execute_error" errors.
type WorkflowNoCommandToExecuteErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "no_command_to_execute_error" from this builder.
func (b *WorkflowNoCommandToExecuteErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "A valid command was not found to execute",
		Technical: "A valid command was not found to execute",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "no_command_to_execute_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "No command available to execute",
		Version:          1,
	}
}

// NewWorkflowNoCommandToExecuteErrorBuilder creates a new error builder for the code "no_command_to_execute_error".
func NewWorkflowNoCommandToExecuteErrorBuilder() *WorkflowNoCommandToExecuteErrorBuilder {
	return &WorkflowNoCommandToExecuteErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowNoCommandToExecuteError creates a new error with the code "no_command_to_execute_error".
func NewWorkflowNoCommandToExecuteError() Error {
	return NewWorkflowNoCommandToExecuteErrorBuilder().Build()
}

// WorkflowRunnerNotFoundCode is the code for an instance of "runner_not_found".
const WorkflowRunnerNotFoundCode = "neb_workflow_runner_not_found"

// IsWorkflowRunnerNotFound tests whether a given error is an instance of "runner_not_found".
func IsWorkflowRunnerNotFound(err errawrgo.Error) bool {
	return err != nil && err.Is(WorkflowRunnerNotFoundCode)
}

// IsWorkflowRunnerNotFound tests whether a given error is an instance of "runner_not_found".
func (External) IsWorkflowRunnerNotFound(err errawrgo.Error) bool {
	return IsWorkflowRunnerNotFound(err)
}

// WorkflowRunnerNotFoundBuilder is a builder for "runner_not_found" errors.
type WorkflowRunnerNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "runner_not_found" from this builder.
func (b *WorkflowRunnerNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "the runner `{{kind}}` was not found",
		Technical: "the runner `{{kind}}` was not found",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "runner_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Runner not found",
		Version:          1,
	}
}

// NewWorkflowRunnerNotFoundBuilder creates a new error builder for the code "runner_not_found".
func NewWorkflowRunnerNotFoundBuilder(kind string) *WorkflowRunnerNotFoundBuilder {
	return &WorkflowRunnerNotFoundBuilder{arguments: impl.ErrorArguments{"kind": impl.NewErrorArgument(kind, "the kind of runner that was not found")}}
}

// NewWorkflowRunnerNotFound creates a new error with the code "runner_not_found".
func NewWorkflowRunnerNotFound(kind string) Error {
	return NewWorkflowRunnerNotFoundBuilder(kind).Build()
}

// WorkflowUnknownCommandExecutionErrorCode is the code for an instance of "unknown_command_execution_error".
const WorkflowUnknownCommandExecutionErrorCode = "neb_workflow_unknown_command_execution_error"

// IsWorkflowUnknownCommandExecutionError tests whether a given error is an instance of "unknown_command_execution_error".
func IsWorkflowUnknownCommandExecutionError(err errawrgo.Error) bool {
	return err != nil && err.Is(WorkflowUnknownCommandExecutionErrorCode)
}

// IsWorkflowUnknownCommandExecutionError tests whether a given error is an instance of "unknown_command_execution_error".
func (External) IsWorkflowUnknownCommandExecutionError(err errawrgo.Error) bool {
	return IsWorkflowUnknownCommandExecutionError(err)
}

// WorkflowUnknownCommandExecutionErrorBuilder is a builder for "unknown_command_execution_error" errors.
type WorkflowUnknownCommandExecutionErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "unknown_command_execution_error" from this builder.
func (b *WorkflowUnknownCommandExecutionErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "something unexpected happened with command exection",
		Technical: "something unexpected happened with command exection",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "unknown_command_execution_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Unknown command execution error",
		Version:          1,
	}
}

// NewWorkflowUnknownCommandExecutionErrorBuilder creates a new error builder for the code "unknown_command_execution_error".
func NewWorkflowUnknownCommandExecutionErrorBuilder(errorString string, commandString string) *WorkflowUnknownCommandExecutionErrorBuilder {
	return &WorkflowUnknownCommandExecutionErrorBuilder{arguments: impl.ErrorArguments{
		"command_string": impl.NewErrorArgument(commandString, "Command being executed"),
		"error_string":   impl.NewErrorArgument(errorString, "Error being thrown"),
	}}
}

// NewWorkflowUnknownCommandExecutionError creates a new error with the code "unknown_command_execution_error".
func NewWorkflowUnknownCommandExecutionError(errorString string, commandString string) Error {
	return NewWorkflowUnknownCommandExecutionErrorBuilder(errorString, commandString).Build()
}

// WorkflowUnknownRuntimeErrorCode is the code for an instance of "unknown_runtime_error".
const WorkflowUnknownRuntimeErrorCode = "neb_workflow_unknown_runtime_error"

// IsWorkflowUnknownRuntimeError tests whether a given error is an instance of "unknown_runtime_error".
func IsWorkflowUnknownRuntimeError(err errawrgo.Error) bool {
	return err != nil && err.Is(WorkflowUnknownRuntimeErrorCode)
}

// IsWorkflowUnknownRuntimeError tests whether a given error is an instance of "unknown_runtime_error".
func (External) IsWorkflowUnknownRuntimeError(err errawrgo.Error) bool {
	return IsWorkflowUnknownRuntimeError(err)
}

// WorkflowUnknownRuntimeErrorBuilder is a builder for "unknown_runtime_error" errors.
type WorkflowUnknownRuntimeErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "unknown_runtime_error" from this builder.
func (b *WorkflowUnknownRuntimeErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "an unknown error occurred",
		Technical: "an unknown error occurred",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "unknown_runtime_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     WorkflowSection,
		ErrorSensitivity: errawrgo.ErrorSensitivityNone,
		ErrorTitle:       "Unknown runtime error",
		Version:          1,
	}
}

// NewWorkflowUnknownRuntimeErrorBuilder creates a new error builder for the code "unknown_runtime_error".
func NewWorkflowUnknownRuntimeErrorBuilder() *WorkflowUnknownRuntimeErrorBuilder {
	return &WorkflowUnknownRuntimeErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewWorkflowUnknownRuntimeError creates a new error with the code "unknown_runtime_error".
func NewWorkflowUnknownRuntimeError() Error {
	return NewWorkflowUnknownRuntimeErrorBuilder().Build()
}
