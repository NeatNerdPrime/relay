// Package errors contains errors for the domain "rcli".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawr "github.com/puppetlabs/errawr-go/v2/pkg/errawr"
	impl "github.com/puppetlabs/errawr-go/v2/pkg/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawr.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "rcli",
	Title: "Relay CLI",
}

// ClientSection defines a section of errors with the following scope:
// Client errors
var ClientSection = &impl.ErrorSection{
	Key:   "client",
	Title: "Client errors",
}

// ClientCreateSessionErrorCode is the code for an instance of "create_session_error".
const ClientCreateSessionErrorCode = "rcli_client_create_session_error"

// IsClientCreateSessionError tests whether a given error is an instance of "create_session_error".
func IsClientCreateSessionError(err errawr.Error) bool {
	return err != nil && err.Is(ClientCreateSessionErrorCode)
}

// IsClientCreateSessionError tests whether a given error is an instance of "create_session_error".
func (External) IsClientCreateSessionError(err errawr.Error) bool {
	return IsClientCreateSessionError(err)
}

// ClientCreateSessionErrorBuilder is a builder for "create_session_error" errors.
type ClientCreateSessionErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "create_session_error" from this builder.
func (b *ClientCreateSessionErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching your API token",
		Technical: "there was an error fetching your API token",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "create_session_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Create session error",
		Version:          1,
	}
}

// NewClientCreateSessionErrorBuilder creates a new error builder for the code "create_session_error".
func NewClientCreateSessionErrorBuilder() *ClientCreateSessionErrorBuilder {
	return &ClientCreateSessionErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientCreateSessionError creates a new error with the code "create_session_error".
func NewClientCreateSessionError() Error {
	return NewClientCreateSessionErrorBuilder().Build()
}

// ClientCreateWorkflowErrorCode is the code for an instance of "create_workflow_error".
const ClientCreateWorkflowErrorCode = "rcli_client_create_workflow_error"

// IsClientCreateWorkflowError tests whether a given error is an instance of "create_workflow_error".
func IsClientCreateWorkflowError(err errawr.Error) bool {
	return err != nil && err.Is(ClientCreateWorkflowErrorCode)
}

// IsClientCreateWorkflowError tests whether a given error is an instance of "create_workflow_error".
func (External) IsClientCreateWorkflowError(err errawr.Error) bool {
	return IsClientCreateWorkflowError(err)
}

// ClientCreateWorkflowErrorBuilder is a builder for "create_workflow_error" errors.
type ClientCreateWorkflowErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "create_workflow_error" from this builder.
func (b *ClientCreateWorkflowErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error creating the workflow",
		Technical: "there was an error creating the workflow",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "create_workflow_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Create workflow error",
		Version:          1,
	}
}

// NewClientCreateWorkflowErrorBuilder creates a new error builder for the code "create_workflow_error".
func NewClientCreateWorkflowErrorBuilder() *ClientCreateWorkflowErrorBuilder {
	return &ClientCreateWorkflowErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientCreateWorkflowError creates a new error with the code "create_workflow_error".
func NewClientCreateWorkflowError() Error {
	return NewClientCreateWorkflowErrorBuilder().Build()
}

// ClientCreateWorkflowRevisionErrorCode is the code for an instance of "create_workflow_revision_error".
const ClientCreateWorkflowRevisionErrorCode = "rcli_client_create_workflow_revision_error"

// IsClientCreateWorkflowRevisionError tests whether a given error is an instance of "create_workflow_revision_error".
func IsClientCreateWorkflowRevisionError(err errawr.Error) bool {
	return err != nil && err.Is(ClientCreateWorkflowRevisionErrorCode)
}

// IsClientCreateWorkflowRevisionError tests whether a given error is an instance of "create_workflow_revision_error".
func (External) IsClientCreateWorkflowRevisionError(err errawr.Error) bool {
	return IsClientCreateWorkflowRevisionError(err)
}

// ClientCreateWorkflowRevisionErrorBuilder is a builder for "create_workflow_revision_error" errors.
type ClientCreateWorkflowRevisionErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "create_workflow_revision_error" from this builder.
func (b *ClientCreateWorkflowRevisionErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error creating the workflow revision",
		Technical: "there was an error creating the workflow revision",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "create_workflow_revision_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Create workflow revision error",
		Version:          1,
	}
}

// NewClientCreateWorkflowRevisionErrorBuilder creates a new error builder for the code "create_workflow_revision_error".
func NewClientCreateWorkflowRevisionErrorBuilder() *ClientCreateWorkflowRevisionErrorBuilder {
	return &ClientCreateWorkflowRevisionErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientCreateWorkflowRevisionError creates a new error with the code "create_workflow_revision_error".
func NewClientCreateWorkflowRevisionError() Error {
	return NewClientCreateWorkflowRevisionErrorBuilder().Build()
}

// ClientCreateWorkflowSecretErrorCode is the code for an instance of "create_workflow_secret_error".
const ClientCreateWorkflowSecretErrorCode = "rcli_client_create_workflow_secret_error"

// IsClientCreateWorkflowSecretError tests whether a given error is an instance of "create_workflow_secret_error".
func IsClientCreateWorkflowSecretError(err errawr.Error) bool {
	return err != nil && err.Is(ClientCreateWorkflowSecretErrorCode)
}

// IsClientCreateWorkflowSecretError tests whether a given error is an instance of "create_workflow_secret_error".
func (External) IsClientCreateWorkflowSecretError(err errawr.Error) bool {
	return IsClientCreateWorkflowSecretError(err)
}

// ClientCreateWorkflowSecretErrorBuilder is a builder for "create_workflow_secret_error" errors.
type ClientCreateWorkflowSecretErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "create_workflow_secret_error" from this builder.
func (b *ClientCreateWorkflowSecretErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error creating the workflow secret",
		Technical: "there was an error creating the workflow secret",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "create_workflow_secret_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Create workflow secret error",
		Version:          1,
	}
}

// NewClientCreateWorkflowSecretErrorBuilder creates a new error builder for the code "create_workflow_secret_error".
func NewClientCreateWorkflowSecretErrorBuilder() *ClientCreateWorkflowSecretErrorBuilder {
	return &ClientCreateWorkflowSecretErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientCreateWorkflowSecretError creates a new error with the code "create_workflow_secret_error".
func NewClientCreateWorkflowSecretError() Error {
	return NewClientCreateWorkflowSecretErrorBuilder().Build()
}

// ClientDeleteWorkflowSecretErrorCode is the code for an instance of "delete_workflow_secret_error".
const ClientDeleteWorkflowSecretErrorCode = "rcli_client_delete_workflow_secret_error"

// IsClientDeleteWorkflowSecretError tests whether a given error is an instance of "delete_workflow_secret_error".
func IsClientDeleteWorkflowSecretError(err errawr.Error) bool {
	return err != nil && err.Is(ClientDeleteWorkflowSecretErrorCode)
}

// IsClientDeleteWorkflowSecretError tests whether a given error is an instance of "delete_workflow_secret_error".
func (External) IsClientDeleteWorkflowSecretError(err errawr.Error) bool {
	return IsClientDeleteWorkflowSecretError(err)
}

// ClientDeleteWorkflowSecretErrorBuilder is a builder for "delete_workflow_secret_error" errors.
type ClientDeleteWorkflowSecretErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "delete_workflow_secret_error" from this builder.
func (b *ClientDeleteWorkflowSecretErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error deleting the workflow secret",
		Technical: "there was an error deleting the workflow secret",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "delete_workflow_secret_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Delete workflow secret error",
		Version:          1,
	}
}

// NewClientDeleteWorkflowSecretErrorBuilder creates a new error builder for the code "delete_workflow_secret_error".
func NewClientDeleteWorkflowSecretErrorBuilder() *ClientDeleteWorkflowSecretErrorBuilder {
	return &ClientDeleteWorkflowSecretErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientDeleteWorkflowSecretError creates a new error with the code "delete_workflow_secret_error".
func NewClientDeleteWorkflowSecretError() Error {
	return NewClientDeleteWorkflowSecretErrorBuilder().Build()
}

// ClientGetIntegrationErrorCode is the code for an instance of "get_integration_error".
const ClientGetIntegrationErrorCode = "rcli_client_get_integration_error"

// IsClientGetIntegrationError tests whether a given error is an instance of "get_integration_error".
func IsClientGetIntegrationError(err errawr.Error) bool {
	return err != nil && err.Is(ClientGetIntegrationErrorCode)
}

// IsClientGetIntegrationError tests whether a given error is an instance of "get_integration_error".
func (External) IsClientGetIntegrationError(err errawr.Error) bool {
	return IsClientGetIntegrationError(err)
}

// ClientGetIntegrationErrorBuilder is a builder for "get_integration_error" errors.
type ClientGetIntegrationErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_integration_error" from this builder.
func (b *ClientGetIntegrationErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching integration {{id}}",
		Technical: "there was an error fetching integration {{id}}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_integration_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Get integration error",
		Version:          1,
	}
}

// NewClientGetIntegrationErrorBuilder creates a new error builder for the code "get_integration_error".
func NewClientGetIntegrationErrorBuilder(id string) *ClientGetIntegrationErrorBuilder {
	return &ClientGetIntegrationErrorBuilder{arguments: impl.ErrorArguments{"id": impl.NewErrorArgument(id, "the id of the integration")}}
}

// NewClientGetIntegrationError creates a new error with the code "get_integration_error".
func NewClientGetIntegrationError(id string) Error {
	return NewClientGetIntegrationErrorBuilder(id).Build()
}

// ClientGetWorkflowErrorCode is the code for an instance of "get_workflow_error".
const ClientGetWorkflowErrorCode = "rcli_client_get_workflow_error"

// IsClientGetWorkflowError tests whether a given error is an instance of "get_workflow_error".
func IsClientGetWorkflowError(err errawr.Error) bool {
	return err != nil && err.Is(ClientGetWorkflowErrorCode)
}

// IsClientGetWorkflowError tests whether a given error is an instance of "get_workflow_error".
func (External) IsClientGetWorkflowError(err errawr.Error) bool {
	return IsClientGetWorkflowError(err)
}

// ClientGetWorkflowErrorBuilder is a builder for "get_workflow_error" errors.
type ClientGetWorkflowErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_workflow_error" from this builder.
func (b *ClientGetWorkflowErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching the workflow",
		Technical: "there was an error fetching the workflow",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_workflow_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Get workflow error",
		Version:          1,
	}
}

// NewClientGetWorkflowErrorBuilder creates a new error builder for the code "get_workflow_error".
func NewClientGetWorkflowErrorBuilder(name string) *ClientGetWorkflowErrorBuilder {
	return &ClientGetWorkflowErrorBuilder{arguments: impl.ErrorArguments{"name": impl.NewErrorArgument(name, "the name of the workflow")}}
}

// NewClientGetWorkflowError creates a new error with the code "get_workflow_error".
func NewClientGetWorkflowError(name string) Error {
	return NewClientGetWorkflowErrorBuilder(name).Build()
}

// ClientGetWorkflowRevisionErrorCode is the code for an instance of "get_workflow_revision_error".
const ClientGetWorkflowRevisionErrorCode = "rcli_client_get_workflow_revision_error"

// IsClientGetWorkflowRevisionError tests whether a given error is an instance of "get_workflow_revision_error".
func IsClientGetWorkflowRevisionError(err errawr.Error) bool {
	return err != nil && err.Is(ClientGetWorkflowRevisionErrorCode)
}

// IsClientGetWorkflowRevisionError tests whether a given error is an instance of "get_workflow_revision_error".
func (External) IsClientGetWorkflowRevisionError(err errawr.Error) bool {
	return IsClientGetWorkflowRevisionError(err)
}

// ClientGetWorkflowRevisionErrorBuilder is a builder for "get_workflow_revision_error" errors.
type ClientGetWorkflowRevisionErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_workflow_revision_error" from this builder.
func (b *ClientGetWorkflowRevisionErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching this workflow revision",
		Technical: "there was an error fetching this workflow revision",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_workflow_revision_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Get workflow revision error",
		Version:          1,
	}
}

// NewClientGetWorkflowRevisionErrorBuilder creates a new error builder for the code "get_workflow_revision_error".
func NewClientGetWorkflowRevisionErrorBuilder() *ClientGetWorkflowRevisionErrorBuilder {
	return &ClientGetWorkflowRevisionErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientGetWorkflowRevisionError creates a new error with the code "get_workflow_revision_error".
func NewClientGetWorkflowRevisionError() Error {
	return NewClientGetWorkflowRevisionErrorBuilder().Build()
}

// ClientGetWorkflowRunErrorCode is the code for an instance of "get_workflow_run_error".
const ClientGetWorkflowRunErrorCode = "rcli_client_get_workflow_run_error"

// IsClientGetWorkflowRunError tests whether a given error is an instance of "get_workflow_run_error".
func IsClientGetWorkflowRunError(err errawr.Error) bool {
	return err != nil && err.Is(ClientGetWorkflowRunErrorCode)
}

// IsClientGetWorkflowRunError tests whether a given error is an instance of "get_workflow_run_error".
func (External) IsClientGetWorkflowRunError(err errawr.Error) bool {
	return IsClientGetWorkflowRunError(err)
}

// ClientGetWorkflowRunErrorBuilder is a builder for "get_workflow_run_error" errors.
type ClientGetWorkflowRunErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_workflow_run_error" from this builder.
func (b *ClientGetWorkflowRunErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching this workflow run",
		Technical: "there was an error fetching this workflow run",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_workflow_run_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Get workflow run error",
		Version:          1,
	}
}

// NewClientGetWorkflowRunErrorBuilder creates a new error builder for the code "get_workflow_run_error".
func NewClientGetWorkflowRunErrorBuilder() *ClientGetWorkflowRunErrorBuilder {
	return &ClientGetWorkflowRunErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientGetWorkflowRunError creates a new error with the code "get_workflow_run_error".
func NewClientGetWorkflowRunError() Error {
	return NewClientGetWorkflowRunErrorBuilder().Build()
}

// ClientGetWorkflowRunStepLogErrorCode is the code for an instance of "get_workflow_run_step_log_error".
const ClientGetWorkflowRunStepLogErrorCode = "rcli_client_get_workflow_run_step_log_error"

// IsClientGetWorkflowRunStepLogError tests whether a given error is an instance of "get_workflow_run_step_log_error".
func IsClientGetWorkflowRunStepLogError(err errawr.Error) bool {
	return err != nil && err.Is(ClientGetWorkflowRunStepLogErrorCode)
}

// IsClientGetWorkflowRunStepLogError tests whether a given error is an instance of "get_workflow_run_step_log_error".
func (External) IsClientGetWorkflowRunStepLogError(err errawr.Error) bool {
	return IsClientGetWorkflowRunStepLogError(err)
}

// ClientGetWorkflowRunStepLogErrorBuilder is a builder for "get_workflow_run_step_log_error" errors.
type ClientGetWorkflowRunStepLogErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "get_workflow_run_step_log_error" from this builder.
func (b *ClientGetWorkflowRunStepLogErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching this workflow run step log",
		Technical: "there was an error fetching this workflow run step log",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "get_workflow_run_step_log_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Get workflow run step log error",
		Version:          1,
	}
}

// NewClientGetWorkflowRunStepLogErrorBuilder creates a new error builder for the code "get_workflow_run_step_log_error".
func NewClientGetWorkflowRunStepLogErrorBuilder() *ClientGetWorkflowRunStepLogErrorBuilder {
	return &ClientGetWorkflowRunStepLogErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientGetWorkflowRunStepLogError creates a new error with the code "get_workflow_run_step_log_error".
func NewClientGetWorkflowRunStepLogError() Error {
	return NewClientGetWorkflowRunStepLogErrorBuilder().Build()
}

// ClientInvalidWorkflowParameterValueErrorCode is the code for an instance of "invalid_workflow_parameter_value_error".
const ClientInvalidWorkflowParameterValueErrorCode = "rcli_client_invalid_workflow_parameter_value_error"

// IsClientInvalidWorkflowParameterValueError tests whether a given error is an instance of "invalid_workflow_parameter_value_error".
func IsClientInvalidWorkflowParameterValueError(err errawr.Error) bool {
	return err != nil && err.Is(ClientInvalidWorkflowParameterValueErrorCode)
}

// IsClientInvalidWorkflowParameterValueError tests whether a given error is an instance of "invalid_workflow_parameter_value_error".
func (External) IsClientInvalidWorkflowParameterValueError(err errawr.Error) bool {
	return IsClientInvalidWorkflowParameterValueError(err)
}

// ClientInvalidWorkflowParameterValueErrorBuilder is a builder for "invalid_workflow_parameter_value_error" errors.
type ClientInvalidWorkflowParameterValueErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_workflow_parameter_value_error" from this builder.
func (b *ClientInvalidWorkflowParameterValueErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The value of this workflow parameter cannot be encoded.",
		Technical: "The value of this workflow parameter cannot be encoded.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_workflow_parameter_value_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid workflow parameter value",
		Version:          1,
	}
}

// NewClientInvalidWorkflowParameterValueErrorBuilder creates a new error builder for the code "invalid_workflow_parameter_value_error".
func NewClientInvalidWorkflowParameterValueErrorBuilder() *ClientInvalidWorkflowParameterValueErrorBuilder {
	return &ClientInvalidWorkflowParameterValueErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientInvalidWorkflowParameterValueError creates a new error with the code "invalid_workflow_parameter_value_error".
func NewClientInvalidWorkflowParameterValueError() Error {
	return NewClientInvalidWorkflowParameterValueErrorBuilder().Build()
}

// ClientInvalidWorkflowSecretValueErrorCode is the code for an instance of "invalid_workflow_secret_value_error".
const ClientInvalidWorkflowSecretValueErrorCode = "rcli_client_invalid_workflow_secret_value_error"

// IsClientInvalidWorkflowSecretValueError tests whether a given error is an instance of "invalid_workflow_secret_value_error".
func IsClientInvalidWorkflowSecretValueError(err errawr.Error) bool {
	return err != nil && err.Is(ClientInvalidWorkflowSecretValueErrorCode)
}

// IsClientInvalidWorkflowSecretValueError tests whether a given error is an instance of "invalid_workflow_secret_value_error".
func (External) IsClientInvalidWorkflowSecretValueError(err errawr.Error) bool {
	return IsClientInvalidWorkflowSecretValueError(err)
}

// ClientInvalidWorkflowSecretValueErrorBuilder is a builder for "invalid_workflow_secret_value_error" errors.
type ClientInvalidWorkflowSecretValueErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_workflow_secret_value_error" from this builder.
func (b *ClientInvalidWorkflowSecretValueErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The value of this workflow secret cannot be encoded.",
		Technical: "The value of this workflow secret cannot be encoded.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_workflow_secret_value_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid workflow secret value",
		Version:          1,
	}
}

// NewClientInvalidWorkflowSecretValueErrorBuilder creates a new error builder for the code "invalid_workflow_secret_value_error".
func NewClientInvalidWorkflowSecretValueErrorBuilder() *ClientInvalidWorkflowSecretValueErrorBuilder {
	return &ClientInvalidWorkflowSecretValueErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientInvalidWorkflowSecretValueError creates a new error with the code "invalid_workflow_secret_value_error".
func NewClientInvalidWorkflowSecretValueError() Error {
	return NewClientInvalidWorkflowSecretValueErrorBuilder().Build()
}

// ClientListIntegrationsErrorCode is the code for an instance of "list_integrations_error".
const ClientListIntegrationsErrorCode = "rcli_client_list_integrations_error"

// IsClientListIntegrationsError tests whether a given error is an instance of "list_integrations_error".
func IsClientListIntegrationsError(err errawr.Error) bool {
	return err != nil && err.Is(ClientListIntegrationsErrorCode)
}

// IsClientListIntegrationsError tests whether a given error is an instance of "list_integrations_error".
func (External) IsClientListIntegrationsError(err errawr.Error) bool {
	return IsClientListIntegrationsError(err)
}

// ClientListIntegrationsErrorBuilder is a builder for "list_integrations_error" errors.
type ClientListIntegrationsErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "list_integrations_error" from this builder.
func (b *ClientListIntegrationsErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching integrations",
		Technical: "there was an error fetching integrations",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "list_integrations_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "List integrations error",
		Version:          1,
	}
}

// NewClientListIntegrationsErrorBuilder creates a new error builder for the code "list_integrations_error".
func NewClientListIntegrationsErrorBuilder() *ClientListIntegrationsErrorBuilder {
	return &ClientListIntegrationsErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientListIntegrationsError creates a new error with the code "list_integrations_error".
func NewClientListIntegrationsError() Error {
	return NewClientListIntegrationsErrorBuilder().Build()
}

// ClientListWorkflowRunsErrorCode is the code for an instance of "list_workflow_runs_error".
const ClientListWorkflowRunsErrorCode = "rcli_client_list_workflow_runs_error"

// IsClientListWorkflowRunsError tests whether a given error is an instance of "list_workflow_runs_error".
func IsClientListWorkflowRunsError(err errawr.Error) bool {
	return err != nil && err.Is(ClientListWorkflowRunsErrorCode)
}

// IsClientListWorkflowRunsError tests whether a given error is an instance of "list_workflow_runs_error".
func (External) IsClientListWorkflowRunsError(err errawr.Error) bool {
	return IsClientListWorkflowRunsError(err)
}

// ClientListWorkflowRunsErrorBuilder is a builder for "list_workflow_runs_error" errors.
type ClientListWorkflowRunsErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "list_workflow_runs_error" from this builder.
func (b *ClientListWorkflowRunsErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching workflow runs",
		Technical: "there was an error fetching workflow runs",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "list_workflow_runs_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "List workflow runs error",
		Version:          1,
	}
}

// NewClientListWorkflowRunsErrorBuilder creates a new error builder for the code "list_workflow_runs_error".
func NewClientListWorkflowRunsErrorBuilder() *ClientListWorkflowRunsErrorBuilder {
	return &ClientListWorkflowRunsErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientListWorkflowRunsError creates a new error with the code "list_workflow_runs_error".
func NewClientListWorkflowRunsError() Error {
	return NewClientListWorkflowRunsErrorBuilder().Build()
}

// ClientListWorkflowsErrorCode is the code for an instance of "list_workflows_error".
const ClientListWorkflowsErrorCode = "rcli_client_list_workflows_error"

// IsClientListWorkflowsError tests whether a given error is an instance of "list_workflows_error".
func IsClientListWorkflowsError(err errawr.Error) bool {
	return err != nil && err.Is(ClientListWorkflowsErrorCode)
}

// IsClientListWorkflowsError tests whether a given error is an instance of "list_workflows_error".
func (External) IsClientListWorkflowsError(err errawr.Error) bool {
	return IsClientListWorkflowsError(err)
}

// ClientListWorkflowsErrorBuilder is a builder for "list_workflows_error" errors.
type ClientListWorkflowsErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "list_workflows_error" from this builder.
func (b *ClientListWorkflowsErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error fetching workflows",
		Technical: "there was an error fetching workflows",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "list_workflows_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "List workflows error",
		Version:          1,
	}
}

// NewClientListWorkflowsErrorBuilder creates a new error builder for the code "list_workflows_error".
func NewClientListWorkflowsErrorBuilder() *ClientListWorkflowsErrorBuilder {
	return &ClientListWorkflowsErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientListWorkflowsError creates a new error with the code "list_workflows_error".
func NewClientListWorkflowsError() Error {
	return NewClientListWorkflowsErrorBuilder().Build()
}

// ClientMissingEmailErrorCode is the code for an instance of "missing_email_error".
const ClientMissingEmailErrorCode = "rcli_client_missing_email_error"

// IsClientMissingEmailError tests whether a given error is an instance of "missing_email_error".
func IsClientMissingEmailError(err errawr.Error) bool {
	return err != nil && err.Is(ClientMissingEmailErrorCode)
}

// IsClientMissingEmailError tests whether a given error is an instance of "missing_email_error".
func (External) IsClientMissingEmailError(err errawr.Error) bool {
	return IsClientMissingEmailError(err)
}

// ClientMissingEmailErrorBuilder is a builder for "missing_email_error" errors.
type ClientMissingEmailErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "missing_email_error" from this builder.
func (b *ClientMissingEmailErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "{{ msg }}",
		Technical: "{{ msg }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "missing_email_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Missing email error",
		Version:          1,
	}
}

// NewClientMissingEmailErrorBuilder creates a new error builder for the code "missing_email_error".
func NewClientMissingEmailErrorBuilder(msg string) *ClientMissingEmailErrorBuilder {
	return &ClientMissingEmailErrorBuilder{arguments: impl.ErrorArguments{"msg": impl.NewErrorArgument(msg, "a message about what the issue was")}}
}

// NewClientMissingEmailError creates a new error with the code "missing_email_error".
func NewClientMissingEmailError(msg string) Error {
	return NewClientMissingEmailErrorBuilder(msg).Build()
}

// ClientNotLoggedInCode is the code for an instance of "not_logged_in".
const ClientNotLoggedInCode = "rcli_client_not_logged_in"

// IsClientNotLoggedIn tests whether a given error is an instance of "not_logged_in".
func IsClientNotLoggedIn(err errawr.Error) bool {
	return err != nil && err.Is(ClientNotLoggedInCode)
}

// IsClientNotLoggedIn tests whether a given error is an instance of "not_logged_in".
func (External) IsClientNotLoggedIn(err errawr.Error) bool {
	return IsClientNotLoggedIn(err)
}

// ClientNotLoggedInBuilder is a builder for "not_logged_in" errors.
type ClientNotLoggedInBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "not_logged_in" from this builder.
func (b *ClientNotLoggedInBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "not logged in",
		Technical: "not logged in",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "not_logged_in",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Not logged in",
		Version:          1,
	}
}

// NewClientNotLoggedInBuilder creates a new error builder for the code "not_logged_in".
func NewClientNotLoggedInBuilder() *ClientNotLoggedInBuilder {
	return &ClientNotLoggedInBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientNotLoggedIn creates a new error with the code "not_logged_in".
func NewClientNotLoggedIn() Error {
	return NewClientNotLoggedInBuilder().Build()
}

// ClientPasswordErrorCode is the code for an instance of "password_error".
const ClientPasswordErrorCode = "rcli_client_password_error"

// IsClientPasswordError tests whether a given error is an instance of "password_error".
func IsClientPasswordError(err errawr.Error) bool {
	return err != nil && err.Is(ClientPasswordErrorCode)
}

// IsClientPasswordError tests whether a given error is an instance of "password_error".
func (External) IsClientPasswordError(err errawr.Error) bool {
	return IsClientPasswordError(err)
}

// ClientPasswordErrorBuilder is a builder for "password_error" errors.
type ClientPasswordErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "password_error" from this builder.
func (b *ClientPasswordErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "{{ msg }}",
		Technical: "{{ msg }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "password_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Password error",
		Version:          1,
	}
}

// NewClientPasswordErrorBuilder creates a new error builder for the code "password_error".
func NewClientPasswordErrorBuilder(msg string) *ClientPasswordErrorBuilder {
	return &ClientPasswordErrorBuilder{arguments: impl.ErrorArguments{"msg": impl.NewErrorArgument(msg, "a message about what the issue was")}}
}

// NewClientPasswordError creates a new error with the code "password_error".
func NewClientPasswordError(msg string) Error {
	return NewClientPasswordErrorBuilder(msg).Build()
}

// ClientRunWorkflowErrorCode is the code for an instance of "run_workflow_error".
const ClientRunWorkflowErrorCode = "rcli_client_run_workflow_error"

// IsClientRunWorkflowError tests whether a given error is an instance of "run_workflow_error".
func IsClientRunWorkflowError(err errawr.Error) bool {
	return err != nil && err.Is(ClientRunWorkflowErrorCode)
}

// IsClientRunWorkflowError tests whether a given error is an instance of "run_workflow_error".
func (External) IsClientRunWorkflowError(err errawr.Error) bool {
	return IsClientRunWorkflowError(err)
}

// ClientRunWorkflowErrorBuilder is a builder for "run_workflow_error" errors.
type ClientRunWorkflowErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "run_workflow_error" from this builder.
func (b *ClientRunWorkflowErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error running the workflow",
		Technical: "there was an error running the workflow",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "run_workflow_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Run workflow error",
		Version:          1,
	}
}

// NewClientRunWorkflowErrorBuilder creates a new error builder for the code "run_workflow_error".
func NewClientRunWorkflowErrorBuilder() *ClientRunWorkflowErrorBuilder {
	return &ClientRunWorkflowErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientRunWorkflowError creates a new error with the code "run_workflow_error".
func NewClientRunWorkflowError() Error {
	return NewClientRunWorkflowErrorBuilder().Build()
}

// ClientTokenLoadErrorCode is the code for an instance of "token_load_error".
const ClientTokenLoadErrorCode = "rcli_client_token_load_error"

// IsClientTokenLoadError tests whether a given error is an instance of "token_load_error".
func IsClientTokenLoadError(err errawr.Error) bool {
	return err != nil && err.Is(ClientTokenLoadErrorCode)
}

// IsClientTokenLoadError tests whether a given error is an instance of "token_load_error".
func (External) IsClientTokenLoadError(err errawr.Error) bool {
	return IsClientTokenLoadError(err)
}

// ClientTokenLoadErrorBuilder is a builder for "token_load_error" errors.
type ClientTokenLoadErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "token_load_error" from this builder.
func (b *ClientTokenLoadErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error loading the auth token",
		Technical: "there was an error loading the auth token",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "token_load_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Token load error",
		Version:          1,
	}
}

// NewClientTokenLoadErrorBuilder creates a new error builder for the code "token_load_error".
func NewClientTokenLoadErrorBuilder() *ClientTokenLoadErrorBuilder {
	return &ClientTokenLoadErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientTokenLoadError creates a new error with the code "token_load_error".
func NewClientTokenLoadError() Error {
	return NewClientTokenLoadErrorBuilder().Build()
}

// ClientTokenStorageErrorCode is the code for an instance of "token_storage_error".
const ClientTokenStorageErrorCode = "rcli_client_token_storage_error"

// IsClientTokenStorageError tests whether a given error is an instance of "token_storage_error".
func IsClientTokenStorageError(err errawr.Error) bool {
	return err != nil && err.Is(ClientTokenStorageErrorCode)
}

// IsClientTokenStorageError tests whether a given error is an instance of "token_storage_error".
func (External) IsClientTokenStorageError(err errawr.Error) bool {
	return IsClientTokenStorageError(err)
}

// ClientTokenStorageErrorBuilder is a builder for "token_storage_error" errors.
type ClientTokenStorageErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "token_storage_error" from this builder.
func (b *ClientTokenStorageErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error storing the auth token",
		Technical: "there was an error storing the auth token",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "token_storage_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Token storage error",
		Version:          1,
	}
}

// NewClientTokenStorageErrorBuilder creates a new error builder for the code "token_storage_error".
func NewClientTokenStorageErrorBuilder() *ClientTokenStorageErrorBuilder {
	return &ClientTokenStorageErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientTokenStorageError creates a new error with the code "token_storage_error".
func NewClientTokenStorageError() Error {
	return NewClientTokenStorageErrorBuilder().Build()
}

// ClientUnexpectedResponseTypeErrorCode is the code for an instance of "unexpected_response_type_error".
const ClientUnexpectedResponseTypeErrorCode = "rcli_client_unexpected_response_type_error"

// IsClientUnexpectedResponseTypeError tests whether a given error is an instance of "unexpected_response_type_error".
func IsClientUnexpectedResponseTypeError(err errawr.Error) bool {
	return err != nil && err.Is(ClientUnexpectedResponseTypeErrorCode)
}

// IsClientUnexpectedResponseTypeError tests whether a given error is an instance of "unexpected_response_type_error".
func (External) IsClientUnexpectedResponseTypeError(err errawr.Error) bool {
	return IsClientUnexpectedResponseTypeError(err)
}

// ClientUnexpectedResponseTypeErrorBuilder is a builder for "unexpected_response_type_error" errors.
type ClientUnexpectedResponseTypeErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "unexpected_response_type_error" from this builder.
func (b *ClientUnexpectedResponseTypeErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "An unexpected response type was returned for this request.",
		Technical: "An unexpected response type was returned for this request.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "unexpected_response_type_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Unexpected response type",
		Version:          1,
	}
}

// NewClientUnexpectedResponseTypeErrorBuilder creates a new error builder for the code "unexpected_response_type_error".
func NewClientUnexpectedResponseTypeErrorBuilder() *ClientUnexpectedResponseTypeErrorBuilder {
	return &ClientUnexpectedResponseTypeErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientUnexpectedResponseTypeError creates a new error with the code "unexpected_response_type_error".
func NewClientUnexpectedResponseTypeError() Error {
	return NewClientUnexpectedResponseTypeErrorBuilder().Build()
}

// ClientUpdateWorkflowErrorCode is the code for an instance of "update_workflow_error".
const ClientUpdateWorkflowErrorCode = "rcli_client_update_workflow_error"

// IsClientUpdateWorkflowError tests whether a given error is an instance of "update_workflow_error".
func IsClientUpdateWorkflowError(err errawr.Error) bool {
	return err != nil && err.Is(ClientUpdateWorkflowErrorCode)
}

// IsClientUpdateWorkflowError tests whether a given error is an instance of "update_workflow_error".
func (External) IsClientUpdateWorkflowError(err errawr.Error) bool {
	return IsClientUpdateWorkflowError(err)
}

// ClientUpdateWorkflowErrorBuilder is a builder for "update_workflow_error" errors.
type ClientUpdateWorkflowErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "update_workflow_error" from this builder.
func (b *ClientUpdateWorkflowErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error updating the workflow",
		Technical: "there was an error updating the workflow",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "update_workflow_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Update workflow error",
		Version:          1,
	}
}

// NewClientUpdateWorkflowErrorBuilder creates a new error builder for the code "update_workflow_error".
func NewClientUpdateWorkflowErrorBuilder(name string) *ClientUpdateWorkflowErrorBuilder {
	return &ClientUpdateWorkflowErrorBuilder{arguments: impl.ErrorArguments{"name": impl.NewErrorArgument(name, "the name of the workflow")}}
}

// NewClientUpdateWorkflowError creates a new error with the code "update_workflow_error".
func NewClientUpdateWorkflowError(name string) Error {
	return NewClientUpdateWorkflowErrorBuilder(name).Build()
}

// ClientUpdateWorkflowSecretErrorCode is the code for an instance of "update_workflow_secret_error".
const ClientUpdateWorkflowSecretErrorCode = "rcli_client_update_workflow_secret_error"

// IsClientUpdateWorkflowSecretError tests whether a given error is an instance of "update_workflow_secret_error".
func IsClientUpdateWorkflowSecretError(err errawr.Error) bool {
	return err != nil && err.Is(ClientUpdateWorkflowSecretErrorCode)
}

// IsClientUpdateWorkflowSecretError tests whether a given error is an instance of "update_workflow_secret_error".
func (External) IsClientUpdateWorkflowSecretError(err errawr.Error) bool {
	return IsClientUpdateWorkflowSecretError(err)
}

// ClientUpdateWorkflowSecretErrorBuilder is a builder for "update_workflow_secret_error" errors.
type ClientUpdateWorkflowSecretErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "update_workflow_secret_error" from this builder.
func (b *ClientUpdateWorkflowSecretErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error updating the workflow secret",
		Technical: "there was an error updating the workflow secret",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "update_workflow_secret_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Update workflow secret error",
		Version:          1,
	}
}

// NewClientUpdateWorkflowSecretErrorBuilder creates a new error builder for the code "update_workflow_secret_error".
func NewClientUpdateWorkflowSecretErrorBuilder() *ClientUpdateWorkflowSecretErrorBuilder {
	return &ClientUpdateWorkflowSecretErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientUpdateWorkflowSecretError creates a new error with the code "update_workflow_secret_error".
func NewClientUpdateWorkflowSecretError() Error {
	return NewClientUpdateWorkflowSecretErrorBuilder().Build()
}

// ClientValidateWorkflowErrorCode is the code for an instance of "validate_workflow_error".
const ClientValidateWorkflowErrorCode = "rcli_client_validate_workflow_error"

// IsClientValidateWorkflowError tests whether a given error is an instance of "validate_workflow_error".
func IsClientValidateWorkflowError(err errawr.Error) bool {
	return err != nil && err.Is(ClientValidateWorkflowErrorCode)
}

// IsClientValidateWorkflowError tests whether a given error is an instance of "validate_workflow_error".
func (External) IsClientValidateWorkflowError(err errawr.Error) bool {
	return IsClientValidateWorkflowError(err)
}

// ClientValidateWorkflowErrorBuilder is a builder for "validate_workflow_error" errors.
type ClientValidateWorkflowErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "validate_workflow_error" from this builder.
func (b *ClientValidateWorkflowErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "there was an error validating the workflow",
		Technical: "there was an error validating the workflow",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "validate_workflow_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Validate workflow error",
		Version:          1,
	}
}

// NewClientValidateWorkflowErrorBuilder creates a new error builder for the code "validate_workflow_error".
func NewClientValidateWorkflowErrorBuilder() *ClientValidateWorkflowErrorBuilder {
	return &ClientValidateWorkflowErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientValidateWorkflowError creates a new error with the code "validate_workflow_error".
func NewClientValidateWorkflowError() Error {
	return NewClientValidateWorkflowErrorBuilder().Build()
}

// ClientWorkflowSecretAlreadyExistsErrorCode is the code for an instance of "workflow_secret_already_exists_error".
const ClientWorkflowSecretAlreadyExistsErrorCode = "rcli_client_workflow_secret_already_exists_error"

// IsClientWorkflowSecretAlreadyExistsError tests whether a given error is an instance of "workflow_secret_already_exists_error".
func IsClientWorkflowSecretAlreadyExistsError(err errawr.Error) bool {
	return err != nil && err.Is(ClientWorkflowSecretAlreadyExistsErrorCode)
}

// IsClientWorkflowSecretAlreadyExistsError tests whether a given error is an instance of "workflow_secret_already_exists_error".
func (External) IsClientWorkflowSecretAlreadyExistsError(err errawr.Error) bool {
	return IsClientWorkflowSecretAlreadyExistsError(err)
}

// ClientWorkflowSecretAlreadyExistsErrorBuilder is a builder for "workflow_secret_already_exists_error" errors.
type ClientWorkflowSecretAlreadyExistsErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "workflow_secret_already_exists_error" from this builder.
func (b *ClientWorkflowSecretAlreadyExistsErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "The workflow secret identified by {{pre key}} already exists.",
		Technical: "The workflow secret identified by {{pre key}} already exists.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "workflow_secret_already_exists_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Workflow secret already exists",
		Version:          1,
	}
}

// NewClientWorkflowSecretAlreadyExistsErrorBuilder creates a new error builder for the code "workflow_secret_already_exists_error".
func NewClientWorkflowSecretAlreadyExistsErrorBuilder(key string) *ClientWorkflowSecretAlreadyExistsErrorBuilder {
	return &ClientWorkflowSecretAlreadyExistsErrorBuilder{arguments: impl.ErrorArguments{"key": impl.NewErrorArgument(key, "the key of the secret")}}
}

// NewClientWorkflowSecretAlreadyExistsError creates a new error with the code "workflow_secret_already_exists_error".
func NewClientWorkflowSecretAlreadyExistsError(key string) Error {
	return NewClientWorkflowSecretAlreadyExistsErrorBuilder(key).Build()
}

// ConfigSection defines a section of errors with the following scope:
// CLI Config errors
var ConfigSection = &impl.ErrorSection{
	Key:   "config",
	Title: "CLI Config errors",
}

// ConfigFileNotFoundCode is the code for an instance of "file_not_found".
const ConfigFileNotFoundCode = "rcli_config_file_not_found"

// IsConfigFileNotFound tests whether a given error is an instance of "file_not_found".
func IsConfigFileNotFound(err errawr.Error) bool {
	return err != nil && err.Is(ConfigFileNotFoundCode)
}

// IsConfigFileNotFound tests whether a given error is an instance of "file_not_found".
func (External) IsConfigFileNotFound(err errawr.Error) bool {
	return IsConfigFileNotFound(err)
}

// ConfigFileNotFoundBuilder is a builder for "file_not_found" errors.
type ConfigFileNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "file_not_found" from this builder.
func (b *ConfigFileNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "No config file found at {{ path }}",
		Technical: "No config file found at {{ path }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "file_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Config file not found",
		Version:          1,
	}
}

// NewConfigFileNotFoundBuilder creates a new error builder for the code "file_not_found".
func NewConfigFileNotFoundBuilder(path string) *ConfigFileNotFoundBuilder {
	return &ConfigFileNotFoundBuilder{arguments: impl.ErrorArguments{"path": impl.NewErrorArgument(path, "User specified config filepath")}}
}

// NewConfigFileNotFound creates a new error with the code "file_not_found".
func NewConfigFileNotFound(path string) Error {
	return NewConfigFileNotFoundBuilder(path).Build()
}

// ConfigInvalidAPIDomainCode is the code for an instance of "invalid_api_domain".
const ConfigInvalidAPIDomainCode = "rcli_config_invalid_api_domain"

// IsConfigInvalidAPIDomain tests whether a given error is an instance of "invalid_api_domain".
func IsConfigInvalidAPIDomain(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidAPIDomainCode)
}

// IsConfigInvalidAPIDomain tests whether a given error is an instance of "invalid_api_domain".
func (External) IsConfigInvalidAPIDomain(err errawr.Error) bool {
	return IsConfigInvalidAPIDomain(err)
}

// ConfigInvalidAPIDomainBuilder is a builder for "invalid_api_domain" errors.
type ConfigInvalidAPIDomainBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_api_domain" from this builder.
func (b *ConfigInvalidAPIDomainBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Provided UI Domain {{ domain }} is not a valid url.",
		Technical: "Provided UI Domain {{ domain }} is not a valid url.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_api_domain",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid API Domain",
		Version:          1,
	}
}

// NewConfigInvalidAPIDomainBuilder creates a new error builder for the code "invalid_api_domain".
func NewConfigInvalidAPIDomainBuilder(domain string) *ConfigInvalidAPIDomainBuilder {
	return &ConfigInvalidAPIDomainBuilder{arguments: impl.ErrorArguments{"domain": impl.NewErrorArgument(domain, "User provided api domain")}}
}

// NewConfigInvalidAPIDomain creates a new error with the code "invalid_api_domain".
func NewConfigInvalidAPIDomain(domain string) Error {
	return NewConfigInvalidAPIDomainBuilder(domain).Build()
}

// ConfigInvalidConfigFileCode is the code for an instance of "invalid_config_file".
const ConfigInvalidConfigFileCode = "rcli_config_invalid_config_file"

// IsConfigInvalidConfigFile tests whether a given error is an instance of "invalid_config_file".
func IsConfigInvalidConfigFile(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidConfigFileCode)
}

// IsConfigInvalidConfigFile tests whether a given error is an instance of "invalid_config_file".
func (External) IsConfigInvalidConfigFile(err errawr.Error) bool {
	return IsConfigInvalidConfigFile(err)
}

// ConfigInvalidConfigFileBuilder is a builder for "invalid_config_file" errors.
type ConfigInvalidConfigFileBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_config_file" from this builder.
func (b *ConfigInvalidConfigFileBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Could not read config file at {{ path }}",
		Technical: "Could not read config file at {{ path }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_config_file",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid config file",
		Version:          1,
	}
}

// NewConfigInvalidConfigFileBuilder creates a new error builder for the code "invalid_config_file".
func NewConfigInvalidConfigFileBuilder(path string) *ConfigInvalidConfigFileBuilder {
	return &ConfigInvalidConfigFileBuilder{arguments: impl.ErrorArguments{"path": impl.NewErrorArgument(path, "User specified config filepath")}}
}

// NewConfigInvalidConfigFile creates a new error with the code "invalid_config_file".
func NewConfigInvalidConfigFile(path string) Error {
	return NewConfigInvalidConfigFileBuilder(path).Build()
}

// ConfigInvalidConfigFlagCode is the code for an instance of "invalid_config_flag".
const ConfigInvalidConfigFlagCode = "rcli_config_invalid_config_flag"

// IsConfigInvalidConfigFlag tests whether a given error is an instance of "invalid_config_flag".
func IsConfigInvalidConfigFlag(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidConfigFlagCode)
}

// IsConfigInvalidConfigFlag tests whether a given error is an instance of "invalid_config_flag".
func (External) IsConfigInvalidConfigFlag(err errawr.Error) bool {
	return IsConfigInvalidConfigFlag(err)
}

// ConfigInvalidConfigFlagBuilder is a builder for "invalid_config_flag" errors.
type ConfigInvalidConfigFlagBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_config_flag" from this builder.
func (b *ConfigInvalidConfigFlagBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Could not read config path. Value must be a valid filepath.",
		Technical: "Could not read config path. Value must be a valid filepath.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_config_flag",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid config flag",
		Version:          1,
	}
}

// NewConfigInvalidConfigFlagBuilder creates a new error builder for the code "invalid_config_flag".
func NewConfigInvalidConfigFlagBuilder() *ConfigInvalidConfigFlagBuilder {
	return &ConfigInvalidConfigFlagBuilder{arguments: impl.ErrorArguments{}}
}

// NewConfigInvalidConfigFlag creates a new error with the code "invalid_config_flag".
func NewConfigInvalidConfigFlag() Error {
	return NewConfigInvalidConfigFlagBuilder().Build()
}

// ConfigInvalidOutputFlagCode is the code for an instance of "invalid_output_flag".
const ConfigInvalidOutputFlagCode = "rcli_config_invalid_output_flag"

// IsConfigInvalidOutputFlag tests whether a given error is an instance of "invalid_output_flag".
func IsConfigInvalidOutputFlag(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidOutputFlagCode)
}

// IsConfigInvalidOutputFlag tests whether a given error is an instance of "invalid_output_flag".
func (External) IsConfigInvalidOutputFlag(err errawr.Error) bool {
	return IsConfigInvalidOutputFlag(err)
}

// ConfigInvalidOutputFlagBuilder is a builder for "invalid_output_flag" errors.
type ConfigInvalidOutputFlagBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_output_flag" from this builder.
func (b *ConfigInvalidOutputFlagBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Unknown value '{{ out }}' provided as output type. Allowed values are 'text' and 'json'.",
		Technical: "Unknown value '{{ out }}' provided as output type. Allowed values are 'text' and 'json'.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_output_flag",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid output flag",
		Version:          1,
	}
}

// NewConfigInvalidOutputFlagBuilder creates a new error builder for the code "invalid_output_flag".
func NewConfigInvalidOutputFlagBuilder(out string) *ConfigInvalidOutputFlagBuilder {
	return &ConfigInvalidOutputFlagBuilder{arguments: impl.ErrorArguments{"out": impl.NewErrorArgument(out, "User provided output type")}}
}

// NewConfigInvalidOutputFlag creates a new error with the code "invalid_output_flag".
func NewConfigInvalidOutputFlag(out string) Error {
	return NewConfigInvalidOutputFlagBuilder(out).Build()
}

// ConfigInvalidUIDomainCode is the code for an instance of "invalid_ui_domain".
const ConfigInvalidUIDomainCode = "rcli_config_invalid_ui_domain"

// IsConfigInvalidUIDomain tests whether a given error is an instance of "invalid_ui_domain".
func IsConfigInvalidUIDomain(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidUIDomainCode)
}

// IsConfigInvalidUIDomain tests whether a given error is an instance of "invalid_ui_domain".
func (External) IsConfigInvalidUIDomain(err errawr.Error) bool {
	return IsConfigInvalidUIDomain(err)
}

// ConfigInvalidUIDomainBuilder is a builder for "invalid_ui_domain" errors.
type ConfigInvalidUIDomainBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_ui_domain" from this builder.
func (b *ConfigInvalidUIDomainBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Provided API Domain {{ domain }} is not a valid url.",
		Technical: "Provided API Domain {{ domain }} is not a valid url.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_ui_domain",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid UI Domain",
		Version:          1,
	}
}

// NewConfigInvalidUIDomainBuilder creates a new error builder for the code "invalid_ui_domain".
func NewConfigInvalidUIDomainBuilder(domain string) *ConfigInvalidUIDomainBuilder {
	return &ConfigInvalidUIDomainBuilder{arguments: impl.ErrorArguments{"domain": impl.NewErrorArgument(domain, "User provided ui domain")}}
}

// NewConfigInvalidUIDomain creates a new error with the code "invalid_ui_domain".
func NewConfigInvalidUIDomain(domain string) Error {
	return NewConfigInvalidUIDomainBuilder(domain).Build()
}

// ConfigInvalidWebDomainCode is the code for an instance of "invalid_web_domain".
const ConfigInvalidWebDomainCode = "rcli_config_invalid_web_domain"

// IsConfigInvalidWebDomain tests whether a given error is an instance of "invalid_web_domain".
func IsConfigInvalidWebDomain(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidWebDomainCode)
}

// IsConfigInvalidWebDomain tests whether a given error is an instance of "invalid_web_domain".
func (External) IsConfigInvalidWebDomain(err errawr.Error) bool {
	return IsConfigInvalidWebDomain(err)
}

// ConfigInvalidWebDomainBuilder is a builder for "invalid_web_domain" errors.
type ConfigInvalidWebDomainBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_web_domain" from this builder.
func (b *ConfigInvalidWebDomainBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Provided Web Domain {{ domain }} is not a valid url.",
		Technical: "Provided Web Domain {{ domain }} is not a valid url.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_web_domain",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid Web Domain",
		Version:          1,
	}
}

// NewConfigInvalidWebDomainBuilder creates a new error builder for the code "invalid_web_domain".
func NewConfigInvalidWebDomainBuilder(domain string) *ConfigInvalidWebDomainBuilder {
	return &ConfigInvalidWebDomainBuilder{arguments: impl.ErrorArguments{"domain": impl.NewErrorArgument(domain, "User provided web domain")}}
}

// NewConfigInvalidWebDomain creates a new error with the code "invalid_web_domain".
func NewConfigInvalidWebDomain(domain string) Error {
	return NewConfigInvalidWebDomainBuilder(domain).Build()
}
