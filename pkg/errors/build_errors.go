// Package errors contains errors for the domain "rcli".
//
// This file is automatically generated by errawr-gen. Do not modify it.
package errors

import (
	errawr "github.com/puppetlabs/errawr-go/v2/pkg/errawr"
	impl "github.com/puppetlabs/errawr-go/v2/pkg/impl"
)

// Error is the type of all errors generated by this package.
type Error interface {
	errawr.Error
}

// External contains methods that can be used externally to help consume errors from this package.
type External struct{}

// API is a singleton instance of the External type.
var API External

// Domain is the general domain in which all errors in this package belong.
var Domain = &impl.ErrorDomain{
	Key:   "rcli",
	Title: "Relay CLI",
}

// ClientSection defines a section of errors with the following scope:
// Client errors
var ClientSection = &impl.ErrorSection{
	Key:   "client",
	Title: "Client errors",
}

// ClientInternalErrorCode is the code for an instance of "internal_error".
const ClientInternalErrorCode = "rcli_client_internal_error"

// IsClientInternalError tests whether a given error is an instance of "internal_error".
func IsClientInternalError(err errawr.Error) bool {
	return err != nil && err.Is(ClientInternalErrorCode)
}

// IsClientInternalError tests whether a given error is an instance of "internal_error".
func (External) IsClientInternalError(err errawr.Error) bool {
	return IsClientInternalError(err)
}

// ClientInternalErrorBuilder is a builder for "internal_error" errors.
type ClientInternalErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "internal_error" from this builder.
func (b *ClientInternalErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "There was a problem executing your request. If the issue persists you may file an issue report at https://github.com/puppetlabs/relay/issues.",
		Technical: "There was a problem executing your request. If the issue persists you may file an issue report at https://github.com/puppetlabs/relay/issues.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "internal_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Unknown error",
		Version:          1,
	}
}

// NewClientInternalErrorBuilder creates a new error builder for the code "internal_error".
func NewClientInternalErrorBuilder() *ClientInternalErrorBuilder {
	return &ClientInternalErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientInternalError creates a new error with the code "internal_error".
func NewClientInternalError() Error {
	return NewClientInternalErrorBuilder().Build()
}

// ClientRequestErrorCode is the code for an instance of "request_error".
const ClientRequestErrorCode = "rcli_client_request_error"

// IsClientRequestError tests whether a given error is an instance of "request_error".
func IsClientRequestError(err errawr.Error) bool {
	return err != nil && err.Is(ClientRequestErrorCode)
}

// IsClientRequestError tests whether a given error is an instance of "request_error".
func (External) IsClientRequestError(err errawr.Error) bool {
	return IsClientRequestError(err)
}

// ClientRequestErrorBuilder is a builder for "request_error" errors.
type ClientRequestErrorBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "request_error" from this builder.
func (b *ClientRequestErrorBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "There was a problem executing your request, please try again. If the issue persists you may file an issue report at https://github.com/puppetlabs/relay/issues.",
		Technical: "There was a problem executing your request, please try again. If the issue persists you may file an issue report at https://github.com/puppetlabs/relay/issues.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "request_error",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Request error",
		Version:          1,
	}
}

// NewClientRequestErrorBuilder creates a new error builder for the code "request_error".
func NewClientRequestErrorBuilder() *ClientRequestErrorBuilder {
	return &ClientRequestErrorBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientRequestError creates a new error with the code "request_error".
func NewClientRequestError() Error {
	return NewClientRequestErrorBuilder().Build()
}

// ClientResponseNotFoundCode is the code for an instance of "response_not_found".
const ClientResponseNotFoundCode = "rcli_client_response_not_found"

// IsClientResponseNotFound tests whether a given error is an instance of "response_not_found".
func IsClientResponseNotFound(err errawr.Error) bool {
	return err != nil && err.Is(ClientResponseNotFoundCode)
}

// IsClientResponseNotFound tests whether a given error is an instance of "response_not_found".
func (External) IsClientResponseNotFound(err errawr.Error) bool {
	return IsClientResponseNotFound(err)
}

// ClientResponseNotFoundBuilder is a builder for "response_not_found" errors.
type ClientResponseNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "response_not_found" from this builder.
func (b *ClientResponseNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Response not found.",
		Technical: "Response not found.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "response_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Response not found error",
		Version:          1,
	}
}

// NewClientResponseNotFoundBuilder creates a new error builder for the code "response_not_found".
func NewClientResponseNotFoundBuilder() *ClientResponseNotFoundBuilder {
	return &ClientResponseNotFoundBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientResponseNotFound creates a new error with the code "response_not_found".
func NewClientResponseNotFound() Error {
	return NewClientResponseNotFoundBuilder().Build()
}

// ClientUserNotAuthenticatedCode is the code for an instance of "user_not_authenticated".
const ClientUserNotAuthenticatedCode = "rcli_client_user_not_authenticated"

// IsClientUserNotAuthenticated tests whether a given error is an instance of "user_not_authenticated".
func IsClientUserNotAuthenticated(err errawr.Error) bool {
	return err != nil && err.Is(ClientUserNotAuthenticatedCode)
}

// IsClientUserNotAuthenticated tests whether a given error is an instance of "user_not_authenticated".
func (External) IsClientUserNotAuthenticated(err errawr.Error) bool {
	return IsClientUserNotAuthenticated(err)
}

// ClientUserNotAuthenticatedBuilder is a builder for "user_not_authenticated" errors.
type ClientUserNotAuthenticatedBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "user_not_authenticated" from this builder.
func (b *ClientUserNotAuthenticatedBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "You must be logged in to perform this operation. Try `relay auth login`.",
		Technical: "You must be logged in to perform this operation. Try `relay auth login`.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "user_not_authenticated",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "User not authenticated error",
		Version:          1,
	}
}

// NewClientUserNotAuthenticatedBuilder creates a new error builder for the code "user_not_authenticated".
func NewClientUserNotAuthenticatedBuilder() *ClientUserNotAuthenticatedBuilder {
	return &ClientUserNotAuthenticatedBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientUserNotAuthenticated creates a new error with the code "user_not_authenticated".
func NewClientUserNotAuthenticated() Error {
	return NewClientUserNotAuthenticatedBuilder().Build()
}

// ClientUserNotAuthorizedCode is the code for an instance of "user_not_authorized".
const ClientUserNotAuthorizedCode = "rcli_client_user_not_authorized"

// IsClientUserNotAuthorized tests whether a given error is an instance of "user_not_authorized".
func IsClientUserNotAuthorized(err errawr.Error) bool {
	return err != nil && err.Is(ClientUserNotAuthorizedCode)
}

// IsClientUserNotAuthorized tests whether a given error is an instance of "user_not_authorized".
func (External) IsClientUserNotAuthorized(err errawr.Error) bool {
	return IsClientUserNotAuthorized(err)
}

// ClientUserNotAuthorizedBuilder is a builder for "user_not_authorized" errors.
type ClientUserNotAuthorizedBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "user_not_authorized" from this builder.
func (b *ClientUserNotAuthorizedBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "You are not authorized to perform this operation. If you believe this is a mistake, please contact your relay administrator.",
		Technical: "You are not authorized to perform this operation. If you believe this is a mistake, please contact your relay administrator.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "user_not_authorized",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ClientSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "User not authorized error",
		Version:          1,
	}
}

// NewClientUserNotAuthorizedBuilder creates a new error builder for the code "user_not_authorized".
func NewClientUserNotAuthorizedBuilder() *ClientUserNotAuthorizedBuilder {
	return &ClientUserNotAuthorizedBuilder{arguments: impl.ErrorArguments{}}
}

// NewClientUserNotAuthorized creates a new error with the code "user_not_authorized".
func NewClientUserNotAuthorized() Error {
	return NewClientUserNotAuthorizedBuilder().Build()
}

// ConfigSection defines a section of errors with the following scope:
// CLI Config errors
var ConfigSection = &impl.ErrorSection{
	Key:   "config",
	Title: "CLI Config errors",
}

// ConfigFileNotFoundCode is the code for an instance of "file_not_found".
const ConfigFileNotFoundCode = "rcli_config_file_not_found"

// IsConfigFileNotFound tests whether a given error is an instance of "file_not_found".
func IsConfigFileNotFound(err errawr.Error) bool {
	return err != nil && err.Is(ConfigFileNotFoundCode)
}

// IsConfigFileNotFound tests whether a given error is an instance of "file_not_found".
func (External) IsConfigFileNotFound(err errawr.Error) bool {
	return IsConfigFileNotFound(err)
}

// ConfigFileNotFoundBuilder is a builder for "file_not_found" errors.
type ConfigFileNotFoundBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "file_not_found" from this builder.
func (b *ConfigFileNotFoundBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "No config file found at {{ path }}",
		Technical: "No config file found at {{ path }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "file_not_found",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Config file not found",
		Version:          1,
	}
}

// NewConfigFileNotFoundBuilder creates a new error builder for the code "file_not_found".
func NewConfigFileNotFoundBuilder(path string) *ConfigFileNotFoundBuilder {
	return &ConfigFileNotFoundBuilder{arguments: impl.ErrorArguments{"path": impl.NewErrorArgument(path, "User specified config filepath")}}
}

// NewConfigFileNotFound creates a new error with the code "file_not_found".
func NewConfigFileNotFound(path string) Error {
	return NewConfigFileNotFoundBuilder(path).Build()
}

// ConfigInvalidAPIDomainCode is the code for an instance of "invalid_api_domain".
const ConfigInvalidAPIDomainCode = "rcli_config_invalid_api_domain"

// IsConfigInvalidAPIDomain tests whether a given error is an instance of "invalid_api_domain".
func IsConfigInvalidAPIDomain(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidAPIDomainCode)
}

// IsConfigInvalidAPIDomain tests whether a given error is an instance of "invalid_api_domain".
func (External) IsConfigInvalidAPIDomain(err errawr.Error) bool {
	return IsConfigInvalidAPIDomain(err)
}

// ConfigInvalidAPIDomainBuilder is a builder for "invalid_api_domain" errors.
type ConfigInvalidAPIDomainBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_api_domain" from this builder.
func (b *ConfigInvalidAPIDomainBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Provided UI Domain {{ domain }} is not a valid url.",
		Technical: "Provided UI Domain {{ domain }} is not a valid url.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_api_domain",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid API Domain",
		Version:          1,
	}
}

// NewConfigInvalidAPIDomainBuilder creates a new error builder for the code "invalid_api_domain".
func NewConfigInvalidAPIDomainBuilder(domain string) *ConfigInvalidAPIDomainBuilder {
	return &ConfigInvalidAPIDomainBuilder{arguments: impl.ErrorArguments{"domain": impl.NewErrorArgument(domain, "User provided api domain")}}
}

// NewConfigInvalidAPIDomain creates a new error with the code "invalid_api_domain".
func NewConfigInvalidAPIDomain(domain string) Error {
	return NewConfigInvalidAPIDomainBuilder(domain).Build()
}

// ConfigInvalidConfigFileCode is the code for an instance of "invalid_config_file".
const ConfigInvalidConfigFileCode = "rcli_config_invalid_config_file"

// IsConfigInvalidConfigFile tests whether a given error is an instance of "invalid_config_file".
func IsConfigInvalidConfigFile(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidConfigFileCode)
}

// IsConfigInvalidConfigFile tests whether a given error is an instance of "invalid_config_file".
func (External) IsConfigInvalidConfigFile(err errawr.Error) bool {
	return IsConfigInvalidConfigFile(err)
}

// ConfigInvalidConfigFileBuilder is a builder for "invalid_config_file" errors.
type ConfigInvalidConfigFileBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_config_file" from this builder.
func (b *ConfigInvalidConfigFileBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Could not read config file at {{ path }}",
		Technical: "Could not read config file at {{ path }}",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_config_file",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid config file",
		Version:          1,
	}
}

// NewConfigInvalidConfigFileBuilder creates a new error builder for the code "invalid_config_file".
func NewConfigInvalidConfigFileBuilder(path string) *ConfigInvalidConfigFileBuilder {
	return &ConfigInvalidConfigFileBuilder{arguments: impl.ErrorArguments{"path": impl.NewErrorArgument(path, "User specified config filepath")}}
}

// NewConfigInvalidConfigFile creates a new error with the code "invalid_config_file".
func NewConfigInvalidConfigFile(path string) Error {
	return NewConfigInvalidConfigFileBuilder(path).Build()
}

// ConfigInvalidConfigFlagCode is the code for an instance of "invalid_config_flag".
const ConfigInvalidConfigFlagCode = "rcli_config_invalid_config_flag"

// IsConfigInvalidConfigFlag tests whether a given error is an instance of "invalid_config_flag".
func IsConfigInvalidConfigFlag(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidConfigFlagCode)
}

// IsConfigInvalidConfigFlag tests whether a given error is an instance of "invalid_config_flag".
func (External) IsConfigInvalidConfigFlag(err errawr.Error) bool {
	return IsConfigInvalidConfigFlag(err)
}

// ConfigInvalidConfigFlagBuilder is a builder for "invalid_config_flag" errors.
type ConfigInvalidConfigFlagBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_config_flag" from this builder.
func (b *ConfigInvalidConfigFlagBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Could not read config path. Value must be a valid filepath.",
		Technical: "Could not read config path. Value must be a valid filepath.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_config_flag",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid config flag",
		Version:          1,
	}
}

// NewConfigInvalidConfigFlagBuilder creates a new error builder for the code "invalid_config_flag".
func NewConfigInvalidConfigFlagBuilder() *ConfigInvalidConfigFlagBuilder {
	return &ConfigInvalidConfigFlagBuilder{arguments: impl.ErrorArguments{}}
}

// NewConfigInvalidConfigFlag creates a new error with the code "invalid_config_flag".
func NewConfigInvalidConfigFlag() Error {
	return NewConfigInvalidConfigFlagBuilder().Build()
}

// ConfigInvalidOutputFlagCode is the code for an instance of "invalid_output_flag".
const ConfigInvalidOutputFlagCode = "rcli_config_invalid_output_flag"

// IsConfigInvalidOutputFlag tests whether a given error is an instance of "invalid_output_flag".
func IsConfigInvalidOutputFlag(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidOutputFlagCode)
}

// IsConfigInvalidOutputFlag tests whether a given error is an instance of "invalid_output_flag".
func (External) IsConfigInvalidOutputFlag(err errawr.Error) bool {
	return IsConfigInvalidOutputFlag(err)
}

// ConfigInvalidOutputFlagBuilder is a builder for "invalid_output_flag" errors.
type ConfigInvalidOutputFlagBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_output_flag" from this builder.
func (b *ConfigInvalidOutputFlagBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Unknown value '{{ out }}' provided as output type. Allowed values are 'text' and 'json'.",
		Technical: "Unknown value '{{ out }}' provided as output type. Allowed values are 'text' and 'json'.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_output_flag",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid output flag",
		Version:          1,
	}
}

// NewConfigInvalidOutputFlagBuilder creates a new error builder for the code "invalid_output_flag".
func NewConfigInvalidOutputFlagBuilder(out string) *ConfigInvalidOutputFlagBuilder {
	return &ConfigInvalidOutputFlagBuilder{arguments: impl.ErrorArguments{"out": impl.NewErrorArgument(out, "User provided output type")}}
}

// NewConfigInvalidOutputFlag creates a new error with the code "invalid_output_flag".
func NewConfigInvalidOutputFlag(out string) Error {
	return NewConfigInvalidOutputFlagBuilder(out).Build()
}

// ConfigInvalidUIDomainCode is the code for an instance of "invalid_ui_domain".
const ConfigInvalidUIDomainCode = "rcli_config_invalid_ui_domain"

// IsConfigInvalidUIDomain tests whether a given error is an instance of "invalid_ui_domain".
func IsConfigInvalidUIDomain(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidUIDomainCode)
}

// IsConfigInvalidUIDomain tests whether a given error is an instance of "invalid_ui_domain".
func (External) IsConfigInvalidUIDomain(err errawr.Error) bool {
	return IsConfigInvalidUIDomain(err)
}

// ConfigInvalidUIDomainBuilder is a builder for "invalid_ui_domain" errors.
type ConfigInvalidUIDomainBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_ui_domain" from this builder.
func (b *ConfigInvalidUIDomainBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Provided API Domain {{ domain }} is not a valid url.",
		Technical: "Provided API Domain {{ domain }} is not a valid url.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_ui_domain",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid UI Domain",
		Version:          1,
	}
}

// NewConfigInvalidUIDomainBuilder creates a new error builder for the code "invalid_ui_domain".
func NewConfigInvalidUIDomainBuilder(domain string) *ConfigInvalidUIDomainBuilder {
	return &ConfigInvalidUIDomainBuilder{arguments: impl.ErrorArguments{"domain": impl.NewErrorArgument(domain, "User provided ui domain")}}
}

// NewConfigInvalidUIDomain creates a new error with the code "invalid_ui_domain".
func NewConfigInvalidUIDomain(domain string) Error {
	return NewConfigInvalidUIDomainBuilder(domain).Build()
}

// ConfigInvalidWebDomainCode is the code for an instance of "invalid_web_domain".
const ConfigInvalidWebDomainCode = "rcli_config_invalid_web_domain"

// IsConfigInvalidWebDomain tests whether a given error is an instance of "invalid_web_domain".
func IsConfigInvalidWebDomain(err errawr.Error) bool {
	return err != nil && err.Is(ConfigInvalidWebDomainCode)
}

// IsConfigInvalidWebDomain tests whether a given error is an instance of "invalid_web_domain".
func (External) IsConfigInvalidWebDomain(err errawr.Error) bool {
	return IsConfigInvalidWebDomain(err)
}

// ConfigInvalidWebDomainBuilder is a builder for "invalid_web_domain" errors.
type ConfigInvalidWebDomainBuilder struct {
	arguments impl.ErrorArguments
}

// Build creates the error for the code "invalid_web_domain" from this builder.
func (b *ConfigInvalidWebDomainBuilder) Build() Error {
	description := &impl.ErrorDescription{
		Friendly:  "Provided Web Domain {{ domain }} is not a valid url.",
		Technical: "Provided Web Domain {{ domain }} is not a valid url.",
	}

	return &impl.Error{
		ErrorArguments:   b.arguments,
		ErrorCode:        "invalid_web_domain",
		ErrorDescription: description,
		ErrorDomain:      Domain,
		ErrorMetadata:    &impl.ErrorMetadata{},
		ErrorSection:     ConfigSection,
		ErrorSensitivity: errawr.ErrorSensitivityNone,
		ErrorTitle:       "Invalid Web Domain",
		Version:          1,
	}
}

// NewConfigInvalidWebDomainBuilder creates a new error builder for the code "invalid_web_domain".
func NewConfigInvalidWebDomainBuilder(domain string) *ConfigInvalidWebDomainBuilder {
	return &ConfigInvalidWebDomainBuilder{arguments: impl.ErrorArguments{"domain": impl.NewErrorArgument(domain, "User provided web domain")}}
}

// NewConfigInvalidWebDomain creates a new error with the code "invalid_web_domain".
func NewConfigInvalidWebDomain(domain string) Error {
	return NewConfigInvalidWebDomainBuilder(domain).Build()
}
