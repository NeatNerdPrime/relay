apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.8
  name: workflowruns.nebula.puppet.com
spec:
  group: nebula.puppet.com
  names:
    kind: WorkflowRun
    listKind: WorkflowRunList
    plural: workflowruns
    singular: workflowrun
  preserveUnknownFields: false
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: WorkflowRun is the root type for a workflow run.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            name:
              type: string
            parameters:
              additionalProperties:
                description: Unstructured is arbitrary JSON data, which may also include
                  base64-encoded binary data.
                x-kubernetes-preserve-unknown-fields: true
              type: object
            workflow:
              properties:
                name:
                  type: string
                parameters:
                  additionalProperties:
                    description: Unstructured is arbitrary JSON data, which may also
                      include base64-encoded binary data.
                    x-kubernetes-preserve-unknown-fields: true
                  type: object
                steps:
                  items:
                    properties:
                      args:
                        items:
                          type: string
                        type: array
                      command:
                        type: string
                      depends_on:
                        items:
                          type: string
                        type: array
                      image:
                        type: string
                      input:
                        items:
                          type: string
                        type: array
                      name:
                        type: string
                      spec:
                        additionalProperties:
                          description: Unstructured is arbitrary JSON data, which
                            may also include base64-encoded binary data.
                          x-kubernetes-preserve-unknown-fields: true
                        type: object
                      when:
                        description: Unstructured is arbitrary JSON data, which may
                          also include base64-encoded binary data.
                        x-kubernetes-preserve-unknown-fields: true
                    required:
                    - name
                    type: object
                  type: array
              required:
              - name
              - steps
              type: object
          required:
          - name
          - workflow
          type: object
        state:
          properties:
            steps:
              additionalProperties:
                additionalProperties:
                  description: Unstructured is arbitrary JSON data, which may also
                    include base64-encoded binary data.
                  x-kubernetes-preserve-unknown-fields: true
                type: object
              type: object
            workflow:
              additionalProperties:
                description: Unstructured is arbitrary JSON data, which may also include
                  base64-encoded binary data.
                x-kubernetes-preserve-unknown-fields: true
              type: object
          type: object
        status:
          properties:
            completionTime:
              format: date-time
              type: string
            conditions:
              additionalProperties:
                properties:
                  completionTime:
                    format: date-time
                    type: string
                  logKey:
                    type: string
                  name:
                    type: string
                  startTime:
                    format: date-time
                    type: string
                  status:
                    type: string
                required:
                - name
                - status
                type: object
              type: object
            startTime:
              format: date-time
              type: string
            status:
              type: string
            steps:
              additionalProperties:
                properties:
                  completionTime:
                    format: date-time
                    type: string
                  logKey:
                    type: string
                  name:
                    type: string
                  startTime:
                    format: date-time
                    type: string
                  status:
                    type: string
                required:
                - name
                - status
                type: object
              type: object
          required:
          - status
          type: object
      required:
      - spec
      type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
# Source: nebula-system/charts/metadata-api/templates/vault-agent-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-metadata-api-vault-agent
data:
  agent.hcl: |-
    auto_auth {
      method "kubernetes" {
        mount_path = "auth/kubernetes"
        config     = {
          role       = "release-name-metadata-api"
          token_path = "/var/run/secrets/kubernetes.io/serviceaccount@vault/token"
        }
      }
    }

    cache {
      use_auto_auth_token = true
    }

    listener "tcp" {
      address     = "127.0.0.1:8200"
      tls_disable = true
    }

    vault {
      address = "http://localhost:8200"
    }

---
# Source: nebula-system/charts/tasks/templates/vault-agent-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-tasks-vault-agent
data:
  agent.hcl: |-
    auto_auth {
      method "kubernetes" {
        mount_path = "auth/kubernetes"
        config     = {
          role       = "release-name-tasks"
          token_path = "/var/run/secrets/kubernetes.io/serviceaccount@vault/token"
        }
      }
    }

    cache {
      use_auto_auth_token = true
    }

    listener "tcp" {
      address     = "127.0.0.1:8200"
      tls_disable = true
    }

    vault {
      address = "http://localhost:8200"
    }

---
# Source: nebula-system/charts/metadata-api/templates/serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-metadata-api
  labels:
    app.kubernetes.io/name: metadata-api
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "latest"
    helm.sh/chart: metadata-api-1.0.0
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-metadata-api
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]
- apiGroups: ["tekton.dev"]
  resources: ["conditions"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: release-name-metadata-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-metadata-api
subjects:
- kind: ServiceAccount
  name: release-name-metadata-api
  namespace: relay-system
---
# Source: nebula-system/charts/metadata-api/templates/vault-agent-serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-metadata-api-vault
  labels:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: metadata-api
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/instance: release-name
    helm.sh/chart: metadata-api-1.0.0
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-metadata-api-vault-agent-token
  annotations:
    kubernetes.io/service-account.name: release-name-metadata-api-vault
type: kubernetes.io/service-account-token

---
# Source: nebula-system/charts/metrics/templates/serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-metrics
  labels:
    app.kubernetes.io/name: metrics
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "latest"
    helm.sh/chart: metrics-1.0.0
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-metrics
rules:
- apiGroups: ["nebula.puppet.com"]
  resources: ["workflowruns"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: release-name-metrics-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-metrics
subjects:
- kind: ServiceAccount
  name: release-name-metrics
  namespace: relay-system
---
# Source: nebula-system/charts/tasks/templates/serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-tasks
  labels:
    app.kubernetes.io/name: tasks
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "latest"
    helm.sh/chart: tasks-1.0.0
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: release-name-tasks-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: release-name-tasks-controller
subjects:
- kind: ServiceAccount
  name: release-name-tasks
  namespace: relay-system
---
# Source: nebula-system/charts/tasks/templates/vault-agent-serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-tasks-vault
  labels:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: tasks
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/instance: release-name
    helm.sh/chart: tasks-1.0.0
---
apiVersion: v1
kind: Secret
metadata:
  name: release-name-tasks-vault-agent-token
  annotations:
    kubernetes.io/service-account.name: release-name-tasks-vault
type: kubernetes.io/service-account-token

---
# Source: nebula-system/charts/tasks/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-tasks-delegate
rules:
- apiGroups: [""]
  resources: ["pods/log"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps", "serviceaccounts", "secrets", "limitranges"]
  verbs: ["create", "update", "patch", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: ["create", "update", "patch", "delete"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["create", "update", "patch", "delete"]
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "taskruns", "pipelines", "tasks", "conditions"]
  verbs: ["create", "update", "patch", "delete"]
- apiGroups: ["serving.knative.dev"]
  resources: ["services"]
  verbs: ["create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: release-name-tasks-controller
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["configmaps", "pods", "serviceaccounts", "secrets", "limitranges"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["tekton.dev"]
  resources: ["pipelineruns", "taskruns", "pipelines", "tasks", "conditions"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["nebula.puppet.com"]
  resources: ["workflowruns", "workflowruns/status"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["relay.sh"]
  resources: ["tenants", "tenants/status", "webhooktriggers", "webhooktriggers/status"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: ["serving.knative.dev"]
  resources: ["services"]
  verbs: ["get", "list", "watch"]

---
# Source: nebula-system/charts/metadata-api/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-metadata-api
  annotations:
    external-dns.alpha.kubernetes.io/hostname: "metadata.relay-system.local"
  labels:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: metadata-api
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/instance: release-name
    helm.sh/chart: metadata-api-1.0.0
spec:
  # Normally we'd make this customizable, but the security surface of this
  # system limits our options here.
  type: ClusterIP
  ports:
  - port: 443
    targetPort: https
    protocol: TCP
    name: https
  selector:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: metadata-api
    app.kubernetes.io/instance: release-name

---
# Source: nebula-system/charts/tasks/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-tasks-webhook
  labels:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: tasks
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/instance: release-name
    helm.sh/chart: tasks-1.0.0
spec:
  type: ClusterIP
  ports:
  - port: 443
    targetPort: webhook
    protocol: TCP
    name: webhook
  selector:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: tasks
    app.kubernetes.io/instance: release-name

---
# Source: nebula-system/charts/metadata-api/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-metadata-api
  annotations:
    secret.reloader.stakater.com/reload: "release-name-metadata-api-tls-crt"
  labels:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: metadata-api
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/instance: release-name
    helm.sh/chart: metadata-api-1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: nebula-system
      app.kubernetes.io/component: metadata-api
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        app.kubernetes.io/name: nebula-system
        app.kubernetes.io/component: metadata-api
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/instance: release-name
        helm.sh/chart: metadata-api-1.0.0
      annotations:
        checksum/vault-agent-config: 9536035bee1d5ff639c0baab1e62b65708a5cc128f49805f539f76d669a14d27
    spec:
      
      serviceAccountName: release-name-metadata-api
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: nebula.puppet.com/scheduling.preemptible
                operator: In
                values:
                - 'true'
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 50
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: nebula-system
                  app.kubernetes.io/component: metadata-api
                  app.kubernetes.io/version: "latest"
                  app.kubernetes.io/instance: release-name
              topologyKey: kubernetes.io/hostname
          - weight: 40
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: nebula-system
                  app.kubernetes.io/component: metadata-api
                  app.kubernetes.io/version: "latest"
                  app.kubernetes.io/instance: release-name
              topologyKey: failure-domain.beta.kubernetes.io/zone
      tolerations:
      - key: nebula.puppet.com/scheduling.preemptible
        operator: Equal
        value: 'true'
        effect: NoSchedule
      containers:
      - name: metadata-api
        image: "gcr.io/nebula-235818/relay-metadata-api:latest"
        imagePullPolicy: IfNotPresent
        ports:
        - name: https
          containerPort: 7000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: https
            scheme: HTTPS
        readinessProbe:
          httpGet:
            path: /healthz
            port: https
            scheme: HTTPS
        resources:
            {}
        env:
        - name: VAULT_ADDR
          value: http://localhost:8200
        - name: RELAY_METADATA_API_ENVIRONMENT
          value: dev
        - name: RELAY_METADATA_API_TLS_KEY_FILE
          value: /var/run/secrets/puppet/relay/tls/tls.key
        - name: RELAY_METADATA_API_TLS_CERTIFICATE_FILE
          value: /var/run/secrets/puppet/relay/tls/tls.crt
        - name: RELAY_METADATA_API_VAULT_TRANSIT_PATH
          value: transit
        - name: RELAY_METADATA_API_VAULT_TRANSIT_KEY
          value: metadata-api
        - name: RELAY_METADATA_API_VAULT_AUTH_PATH
          value: auth/jwt
        - name: RELAY_METADATA_API_VAULT_AUTH_ROLE
          value: tenant
        volumeMounts:
        - name: tls-crt
          mountPath: /var/run/secrets/puppet/relay/tls
          readOnly: true
      - name: vault
        image: "vault:1.1.3"
        imagePullPolicy: IfNotPresent
        command:
        - vault
        - agent
        - -config=/var/run/vault/config/agent.hcl
        volumeMounts:
        - name: vault-agent-sa-token
          mountPath: "/var/run/secrets/kubernetes.io/serviceaccount@vault"
          readOnly: true
        - name: vault-agent-conf
          mountPath: "/var/run/vault/config"
          readOnly: true
        resources:
            {}
      volumes:
      - name: tls-crt
        secret:
          secretName: release-name-metadata-api-tls-crt
      - name: vault-agent-sa-token
        secret:
          secretName: release-name-metadata-api-vault-agent-token
      - name: vault-agent-conf
        configMap:
          name: release-name-metadata-api-vault-agent
---
# Source: nebula-system/charts/metrics/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-metrics
  labels:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: metrics
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/instance: release-name
    helm.sh/chart: metrics-1.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nebula-system
      app.kubernetes.io/component: metrics
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      name: relay-metrics
      labels:
        app.kubernetes.io/name: nebula-system
        app.kubernetes.io/component: metrics
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/instance: release-name
        helm.sh/chart: metrics-1.0.0
    spec:
      serviceAccountName: release-name-metrics
      containers:
      - name: metrics
        image: "gcr.io/nebula-235818/relay-metrics:latest"
        imagePullPolicy: IfNotPresent
        command:
        - relay-metrics
        - -publish
        - -environment
        - ""
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /var/run/secrets/google/key.json
        volumeMounts:
        - name: google-application-credentials
          mountPath: "/var/run/secrets/google"
          readOnly: true
      volumes:
      - name: google-application-credentials
        secret:
          secretName: relay-ca

---
# Source: nebula-system/charts/tasks/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-tasks
  labels:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: tasks
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/instance: release-name
    helm.sh/chart: tasks-1.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: nebula-system
      app.kubernetes.io/component: tasks
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      name: relay-operator
      labels:
        app.kubernetes.io/name: nebula-system
        app.kubernetes.io/component: tasks
        app.kubernetes.io/version: "latest"
        app.kubernetes.io/instance: release-name
        helm.sh/chart: tasks-1.0.0
    spec:
      serviceAccountName: release-name-tasks
      containers:
      - name: tasks
        image: "gcr.io/nebula-235818/relay-operator:latest"
        imagePullPolicy: IfNotPresent
        command:
        - relay-operator
        - -environment
        - dev
        - -storage-addr
        - "file:///storage"
        - -num-workers
        - "2"
        - -jwt-signing-key-file
        - "/var/run/secrets/puppet/relay/jwt/key.pem"
        - -vault-transit-path
        - transit
        - -vault-transit-key
        - metadata-api
        - -metadata-api-url
        - "https://metadata.relay-system.local"
        - -webhook-server-key-dir
        - /var/run/secrets/puppet/relay/webhook-tls
        - -dynamic-rbac-binding
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /var/run/secrets/google/key.json
        - name: VAULT_ADDR
          value: http://localhost:8200
        ports:
        - name: webhook
          containerPort: 443
          protocol: TCP
        volumeMounts:
        - name: google-application-credentials
          mountPath: "/var/run/secrets/google"
          readOnly: true
        - name: jwt-signing-key
          mountPath: /var/run/secrets/puppet/relay/jwt
          readOnly: true
        - name: webhook-tls
          mountPath: /var/run/secrets/puppet/relay/webhook-tls
          readyOnly: true
      - name: vault
        image: "vault:1.1.3"
        imagePullPolicy: IfNotPresent
        command:
        - vault
        - agent
        - -config=/var/run/vault/config/agent.hcl
        volumeMounts:
        - name: vault-agent-sa-token
          mountPath: "/var/run/secrets/kubernetes.io/serviceaccount@vault"
          readOnly: true
        - name: vault-agent-conf
          mountPath: "/var/run/vault/config"
          readOnly: true
      volumes:
      - name: jwt-signing-key
        secret:
          secretName: relay-ca
      - name: webhook-tls
        secret:
          secretName: release-name-tasks-webhook-tls-crt
      - name: google-application-credentials
        secret:
          secretName: relay-ca
      - name: vault-agent-sa-token
        secret:
          secretName: release-name-tasks-vault-agent-token
      - name: vault-agent-conf
        configMap:
          name: release-name-tasks-vault-agent

---
# Source: nebula-system/charts/metadata-api/templates/horizontalpodautoscaler.yaml
apiVersion: autoscaling/v2beta1
kind: HorizontalPodAutoscaler
metadata:
  name: release-name-metadata-api
  labels:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: metadata-api
    app.kubernetes.io/instance: release-name
    helm.sh/chart: metadata-api-1.0.0
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: release-name-metadata-api
  minReplicas: 3
  maxReplicas: 9
  metrics:
  - type: Resource
    resource:
      name: cpu
      targetAverageUtilization: 75
  - type: Resource
    resource:
      name: memory
      targetAverageUtilization: 75

---
# Source: nebula-system/charts/metadata-api/templates/certificate.yaml
apiVersion: cert-manager.io/v1beta1
kind: Certificate
metadata:
  name: release-name-metadata-api
spec:
  secretName: release-name-metadata-api-tls-crt
  commonName: "metadata.relay-system.local"
  dnsNames:
  - "metadata.relay-system.local"
  issuerRef:
    kind: ClusterIssuer
    name: relay-cluster-issuer
---
# Source: nebula-system/charts/tasks/templates/certificate.yaml
apiVersion: cert-manager.io/v1beta1
kind: Certificate
metadata:
  name: release-name-tasks-webhook
  labels:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: tasks
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/instance: release-name
    helm.sh/chart: tasks-1.0.0
spec:
  secretName: release-name-tasks-webhook-tls-crt
  commonName: "release-name-tasks-webhook.default.svc"
  dnsNames:
  - "release-name-tasks-webhook.default.svc"
  - "release-name-tasks-webhook.default.svc.cluster.local"
  issuerRef:
    kind: ClusterIssuer
    name: relay-cluster-issuer

---
# Source: nebula-system/charts/tasks/templates/mutatingwebhookconfiguration.yaml
apiVersion: admissionregistration.k8s.io/v1beta1
kind: MutatingWebhookConfiguration
metadata:
  name: release-name-tasks-pod-enforcement
  labels:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: tasks
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/instance: release-name
    helm.sh/chart: tasks-1.0.0
webhooks:
- name: release-name-tasks-pod-enforcement.admission.controller.relay.sh
  clientConfig:
    service:
      name: release-name-tasks-webhook
      namespace: "relay-system"
      path: /mutate/pod-enforcement
  rules:
  - apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
    operations: ["CREATE", "UPDATE"]
  failurePolicy: Fail
  sideEffects: None
  reinvocationPolicy: IfNeeded
  namespaceSelector:
    matchLabels:
      controller.relay.sh/tenant-workload: "true"

---
# Source: nebula-system/charts/tasks/templates/rbacdefinition.yaml
apiVersion: rbacmanager.reactiveops.io/v1beta1
kind: RBACDefinition
metadata:
  name: release-name-tasks
  labels:
    app.kubernetes.io/name: nebula-system
    app.kubernetes.io/component: tasks
    app.kubernetes.io/version: "latest"
    app.kubernetes.io/instance: release-name
    helm.sh/chart: tasks-1.0.0
rbacBindings:
- name: release-name-tasks-delegate
  subjects:
  - kind: ServiceAccount
    name: release-name-tasks
  clusterRoleBindings: []
  roleBindings:
  - clusterRole: release-name-tasks-delegate
    namespaceSelector:
      matchLabels:
        controller.relay.sh/tenant-workload: "true"

