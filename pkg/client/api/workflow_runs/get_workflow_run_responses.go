// Code generated by go-swagger; DO NOT EDIT.

package workflow_runs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// GetWorkflowRunReader is a Reader for the GetWorkflowRun structure.
type GetWorkflowRunReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWorkflowRunReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWorkflowRunOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetWorkflowRunDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetWorkflowRunOK creates a GetWorkflowRunOK with default headers values
func NewGetWorkflowRunOK() *GetWorkflowRunOK {
	return &GetWorkflowRunOK{}
}

/*GetWorkflowRunOK handles this case with default header values.

Metadata about the workflow run
*/
type GetWorkflowRunOK struct {
	Payload *GetWorkflowRunOKBody
}

func (o *GetWorkflowRunOK) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflowName}/runs/{workflowRunNumber}][%d] getWorkflowRunOK  %+v", 200, o.Payload)
}

func (o *GetWorkflowRunOK) GetPayload() *GetWorkflowRunOKBody {
	return o.Payload
}

func (o *GetWorkflowRunOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowRunOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWorkflowRunDefault creates a GetWorkflowRunDefault with default headers values
func NewGetWorkflowRunDefault(code int) *GetWorkflowRunDefault {
	return &GetWorkflowRunDefault{
		_statusCode: code,
	}
}

/*GetWorkflowRunDefault handles this case with default header values.

An error occurred
*/
type GetWorkflowRunDefault struct {
	_statusCode int

	Payload *GetWorkflowRunDefaultBody
}

// Code gets the status code for the get workflow run default response
func (o *GetWorkflowRunDefault) Code() int {
	return o._statusCode
}

func (o *GetWorkflowRunDefault) Error() string {
	return fmt.Sprintf("[GET /api/workflows/{workflowName}/runs/{workflowRunNumber}][%d] getWorkflowRun default  %+v", o._statusCode, o.Payload)
}

func (o *GetWorkflowRunDefault) GetPayload() *GetWorkflowRunDefaultBody {
	return o.Payload
}

func (o *GetWorkflowRunDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetWorkflowRunDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetWorkflowRunDefaultBody Error response
swagger:model GetWorkflowRunDefaultBody
*/
type GetWorkflowRunDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get workflow run default body
func (o *GetWorkflowRunDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWorkflowRunDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowRun default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowRunDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowRunDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowRunDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetWorkflowRunOKBody get workflow run o k body
swagger:model GetWorkflowRunOKBody
*/
type GetWorkflowRunOKBody struct {
	models.Entity

	// run
	Run *models.WorkflowRun `json:"run,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetWorkflowRunOKBody) UnmarshalJSON(raw []byte) error {
	// GetWorkflowRunOKBodyAO0
	var getWorkflowRunOKBodyAO0 models.Entity
	if err := swag.ReadJSON(raw, &getWorkflowRunOKBodyAO0); err != nil {
		return err
	}
	o.Entity = getWorkflowRunOKBodyAO0

	// GetWorkflowRunOKBodyAO1
	var dataGetWorkflowRunOKBodyAO1 struct {
		Run *models.WorkflowRun `json:"run,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetWorkflowRunOKBodyAO1); err != nil {
		return err
	}

	o.Run = dataGetWorkflowRunOKBodyAO1.Run

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetWorkflowRunOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getWorkflowRunOKBodyAO0, err := swag.WriteJSON(o.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getWorkflowRunOKBodyAO0)

	var dataGetWorkflowRunOKBodyAO1 struct {
		Run *models.WorkflowRun `json:"run,omitempty"`
	}

	dataGetWorkflowRunOKBodyAO1.Run = o.Run

	jsonDataGetWorkflowRunOKBodyAO1, errGetWorkflowRunOKBodyAO1 := swag.WriteJSON(dataGetWorkflowRunOKBodyAO1)
	if errGetWorkflowRunOKBodyAO1 != nil {
		return nil, errGetWorkflowRunOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetWorkflowRunOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get workflow run o k body
func (o *GetWorkflowRunOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Entity
	if err := o.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRun(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetWorkflowRunOKBody) validateRun(formats strfmt.Registry) error {

	if swag.IsZero(o.Run) { // not required
		return nil
	}

	if o.Run != nil {
		if err := o.Run.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getWorkflowRunOK" + "." + "run")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetWorkflowRunOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetWorkflowRunOKBody) UnmarshalBinary(b []byte) error {
	var res GetWorkflowRunOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
