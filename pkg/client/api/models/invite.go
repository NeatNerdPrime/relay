// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Invite invite
// swagger:model Invite
type Invite struct {
	InviteSummary

	Lifecycle

	// The time that the invite was accepted
	// Format: date-time
	AcceptedAt *strfmt.DateTime `json:"accepted_at,omitempty"`

	// acceptor
	Acceptor *UserSummary `json:"acceptor,omitempty"`

	// inviter
	Inviter *UserSummary `json:"inviter,omitempty"`

	// The initial roles to grant to the user
	Roles []*RoleSummary `json:"roles"`

	// The time that the invite was last sent
	// Format: date-time
	SentAt *strfmt.DateTime `json:"sent_at,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Invite) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 InviteSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.InviteSummary = aO0

	// AO1
	var aO1 Lifecycle
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.Lifecycle = aO1

	// AO2
	var dataAO2 struct {
		AcceptedAt *strfmt.DateTime `json:"accepted_at,omitempty"`

		Acceptor *UserSummary `json:"acceptor,omitempty"`

		Inviter *UserSummary `json:"inviter,omitempty"`

		Roles []*RoleSummary `json:"roles"`

		SentAt *strfmt.DateTime `json:"sent_at,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.AcceptedAt = dataAO2.AcceptedAt

	m.Acceptor = dataAO2.Acceptor

	m.Inviter = dataAO2.Inviter

	m.Roles = dataAO2.Roles

	m.SentAt = dataAO2.SentAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Invite) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.InviteSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.Lifecycle)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	var dataAO2 struct {
		AcceptedAt *strfmt.DateTime `json:"accepted_at,omitempty"`

		Acceptor *UserSummary `json:"acceptor,omitempty"`

		Inviter *UserSummary `json:"inviter,omitempty"`

		Roles []*RoleSummary `json:"roles"`

		SentAt *strfmt.DateTime `json:"sent_at,omitempty"`
	}

	dataAO2.AcceptedAt = m.AcceptedAt

	dataAO2.Acceptor = m.Acceptor

	dataAO2.Inviter = m.Inviter

	dataAO2.Roles = m.Roles

	dataAO2.SentAt = m.SentAt

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this invite
func (m *Invite) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with InviteSummary
	if err := m.InviteSummary.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with Lifecycle
	if err := m.Lifecycle.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcceptedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcceptor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInviter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSentAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Invite) validateAcceptedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.AcceptedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("accepted_at", "body", "date-time", m.AcceptedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Invite) validateAcceptor(formats strfmt.Registry) error {

	if swag.IsZero(m.Acceptor) { // not required
		return nil
	}

	if m.Acceptor != nil {
		if err := m.Acceptor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acceptor")
			}
			return err
		}
	}

	return nil
}

func (m *Invite) validateInviter(formats strfmt.Registry) error {

	if swag.IsZero(m.Inviter) { // not required
		return nil
	}

	if m.Inviter != nil {
		if err := m.Inviter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inviter")
			}
			return err
		}
	}

	return nil
}

func (m *Invite) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	for i := 0; i < len(m.Roles); i++ {
		if swag.IsZero(m.Roles[i]) { // not required
			continue
		}

		if m.Roles[i] != nil {
			if err := m.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Invite) validateSentAt(formats strfmt.Registry) error {

	if swag.IsZero(m.SentAt) { // not required
		return nil
	}

	if err := validate.FormatOf("sent_at", "body", "date-time", m.SentAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Invite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Invite) UnmarshalBinary(b []byte) error {
	var res Invite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
