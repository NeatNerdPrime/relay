// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowRunIdentifier A unique identifier for a workflow run
// swagger:model WorkflowRunIdentifier
type WorkflowRunIdentifier struct {

	// run number
	// Required: true
	RunNumber WorkflowRunNumber `json:"run_number"`

	// workflow
	// Required: true
	Workflow *WorkflowIdentifier `json:"workflow"`
}

// Validate validates this workflow run identifier
func (m *WorkflowRunIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRunNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowRunIdentifier) validateRunNumber(formats strfmt.Registry) error {

	if err := m.RunNumber.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("run_number")
		}
		return err
	}

	return nil
}

func (m *WorkflowRunIdentifier) validateWorkflow(formats strfmt.Registry) error {

	if err := validate.Required("workflow", "body", m.Workflow); err != nil {
		return err
	}

	if m.Workflow != nil {
		if err := m.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowRunIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowRunIdentifier) UnmarshalBinary(b []byte) error {
	var res WorkflowRunIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
