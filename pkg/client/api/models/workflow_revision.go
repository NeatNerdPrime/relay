// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowRevision workflow revision
//
// swagger:model WorkflowRevision
type WorkflowRevision struct {
	WorkflowRevisionSummary

	// Time of creation
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// parameters
	Parameters WorkflowParameters `json:"parameters,omitempty"`

	// Raw YAML representation of the yaml
	// Required: true
	Raw *string `json:"raw"`

	// A list of parsed information about workflow steps
	// Required: true
	Steps []WorkflowStep `json:"steps"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *WorkflowRevision) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkflowRevisionSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkflowRevisionSummary = aO0

	// AO1
	var dataAO1 struct {
		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		Parameters WorkflowParameters `json:"parameters,omitempty"`

		Raw *string `json:"raw"`

		Steps []WorkflowStep `json:"steps"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CreatedAt = dataAO1.CreatedAt

	m.Parameters = dataAO1.Parameters

	m.Raw = dataAO1.Raw

	m.Steps = dataAO1.Steps

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m WorkflowRevision) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.WorkflowRevisionSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

		Parameters WorkflowParameters `json:"parameters,omitempty"`

		Raw *string `json:"raw"`

		Steps []WorkflowStep `json:"steps"`
	}

	dataAO1.CreatedAt = m.CreatedAt

	dataAO1.Parameters = m.Parameters

	dataAO1.Raw = m.Raw

	dataAO1.Steps = m.Steps

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow revision
func (m *WorkflowRevision) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkflowRevisionSummary
	if err := m.WorkflowRevisionSummary.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSteps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowRevision) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowRevision) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if err := m.Parameters.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parameters")
		}
		return err
	}

	return nil
}

func (m *WorkflowRevision) validateRaw(formats strfmt.Registry) error {

	if err := validate.Required("raw", "body", m.Raw); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowRevision) validateSteps(formats strfmt.Registry) error {

	if err := validate.Required("steps", "body", m.Steps); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowRevision) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowRevision) UnmarshalBinary(b []byte) error {
	var res WorkflowRevision
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
