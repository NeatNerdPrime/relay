// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Workflow workflow
//
// swagger:model Workflow
type Workflow struct {
	WorkflowSummary

	Lifecycle

	// latest revision
	LatestRevision *WorkflowRevisionSummary `json:"latest_revision,omitempty"`

	// most recent run
	MostRecentRun *WorkflowRunSummary `json:"most_recent_run,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Workflow) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 WorkflowSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.WorkflowSummary = aO0

	// AO1
	var aO1 Lifecycle
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.Lifecycle = aO1

	// AO2
	var dataAO2 struct {
		LatestRevision *WorkflowRevisionSummary `json:"latest_revision,omitempty"`

		MostRecentRun *WorkflowRunSummary `json:"most_recent_run,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.LatestRevision = dataAO2.LatestRevision

	m.MostRecentRun = dataAO2.MostRecentRun

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Workflow) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.WorkflowSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.Lifecycle)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	var dataAO2 struct {
		LatestRevision *WorkflowRevisionSummary `json:"latest_revision,omitempty"`

		MostRecentRun *WorkflowRunSummary `json:"most_recent_run,omitempty"`
	}

	dataAO2.LatestRevision = m.LatestRevision

	dataAO2.MostRecentRun = m.MostRecentRun

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this workflow
func (m *Workflow) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with WorkflowSummary
	if err := m.WorkflowSummary.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with Lifecycle
	if err := m.Lifecycle.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMostRecentRun(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Workflow) validateLatestRevision(formats strfmt.Registry) error {

	if swag.IsZero(m.LatestRevision) { // not required
		return nil
	}

	if m.LatestRevision != nil {
		if err := m.LatestRevision.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latest_revision")
			}
			return err
		}
	}

	return nil
}

func (m *Workflow) validateMostRecentRun(formats strfmt.Registry) error {

	if swag.IsZero(m.MostRecentRun) { // not required
		return nil
	}

	if m.MostRecentRun != nil {
		if err := m.MostRecentRun.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("most_recent_run")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Workflow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Workflow) UnmarshalBinary(b []byte) error {
	var res Workflow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
