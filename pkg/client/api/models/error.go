// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Error An error
// swagger:model Error
type Error struct {

	// arguments
	Arguments interface{} `json:"arguments,omitempty"`

	// code
	Code string `json:"code,omitempty"`

	// description
	Description *ErrorDescription `json:"description,omitempty"`

	// domain
	Domain string `json:"domain,omitempty"`

	// formatted
	Formatted *ErrorFormatted `json:"formatted,omitempty"`

	// items
	Items map[string]Error `json:"items,omitempty"`

	// section
	Section string `json:"section,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this error
func (m *Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFormatted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Error) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if m.Description != nil {
		if err := m.Description.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("description")
			}
			return err
		}
	}

	return nil
}

func (m *Error) validateFormatted(formats strfmt.Registry) error {

	if swag.IsZero(m.Formatted) { // not required
		return nil
	}

	if m.Formatted != nil {
		if err := m.Formatted.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("formatted")
			}
			return err
		}
	}

	return nil
}

func (m *Error) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for k := range m.Items {

		if err := validate.Required("items"+"."+k, "body", m.Items[k]); err != nil {
			return err
		}
		if val, ok := m.Items[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Error) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Error) UnmarshalBinary(b []byte) error {
	var res Error
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorDescription error description
// swagger:model ErrorDescription
type ErrorDescription struct {

	// friendly
	Friendly string `json:"friendly,omitempty"`

	// technical
	Technical string `json:"technical,omitempty"`
}

// Validate validates this error description
func (m *ErrorDescription) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrorDescription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorDescription) UnmarshalBinary(b []byte) error {
	var res ErrorDescription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ErrorFormatted error formatted
// swagger:model ErrorFormatted
type ErrorFormatted struct {

	// friendly
	Friendly string `json:"friendly,omitempty"`

	// technical
	Technical string `json:"technical,omitempty"`
}

// Validate validates this error formatted
func (m *ErrorFormatted) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrorFormatted) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorFormatted) UnmarshalBinary(b []byte) error {
	var res ErrorFormatted
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
