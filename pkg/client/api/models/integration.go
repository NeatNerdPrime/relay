// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Integration integration
// swagger:model Integration
type Integration struct {
	IntegrationSummary

	Lifecycle

	// Integration account login name.
	AccountLogin string `json:"account_login,omitempty"`

	// Time of last integration call
	LastUsed string `json:"last_used,omitempty"`

	// The workflows being used by this integration
	Workflows []*WorkflowSummary `json:"workflows"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Integration) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 IntegrationSummary
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.IntegrationSummary = aO0

	// AO1
	var aO1 Lifecycle
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.Lifecycle = aO1

	// AO2
	var dataAO2 struct {
		AccountLogin string `json:"account_login,omitempty"`

		LastUsed string `json:"last_used,omitempty"`

		Workflows []*WorkflowSummary `json:"workflows"`
	}
	if err := swag.ReadJSON(raw, &dataAO2); err != nil {
		return err
	}

	m.AccountLogin = dataAO2.AccountLogin

	m.LastUsed = dataAO2.LastUsed

	m.Workflows = dataAO2.Workflows

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Integration) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 3)

	aO0, err := swag.WriteJSON(m.IntegrationSummary)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.Lifecycle)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	var dataAO2 struct {
		AccountLogin string `json:"account_login,omitempty"`

		LastUsed string `json:"last_used,omitempty"`

		Workflows []*WorkflowSummary `json:"workflows"`
	}

	dataAO2.AccountLogin = m.AccountLogin

	dataAO2.LastUsed = m.LastUsed

	dataAO2.Workflows = m.Workflows

	jsonDataAO2, errAO2 := swag.WriteJSON(dataAO2)
	if errAO2 != nil {
		return nil, errAO2
	}
	_parts = append(_parts, jsonDataAO2)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this integration
func (m *Integration) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with IntegrationSummary
	if err := m.IntegrationSummary.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with Lifecycle
	if err := m.Lifecycle.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Integration) validateWorkflows(formats strfmt.Registry) error {

	if swag.IsZero(m.Workflows) { // not required
		return nil
	}

	for i := 0; i < len(m.Workflows); i++ {
		if swag.IsZero(m.Workflows[i]) { // not required
			continue
		}

		if m.Workflows[i] != nil {
			if err := m.Workflows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("workflows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Integration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Integration) UnmarshalBinary(b []byte) error {
	var res Integration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
