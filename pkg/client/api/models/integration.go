// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Integration A nebula external integration
// swagger:model Integration
type Integration struct {

	// Integration account login name.
	AccountLogin string `json:"account_login,omitempty"`

	// Time of integration creation
	// Required: true
	CreatedAt *string `json:"created_at"`

	// Integration id
	// Required: true
	ID *string `json:"id"`

	// Time of last integration call
	LastUsed string `json:"last_used,omitempty"`

	// A descriptive integration name
	Name string `json:"name,omitempty"`

	// Integration provider id. Must be one of the suported integration providers
	// Required: true
	// Enum: [github]
	Provider *string `json:"provider"`

	// Current status of the integration
	// Enum: [unconfigured configured]
	Status string `json:"status,omitempty"`

	// Time of last integration update
	// Required: true
	UpdatedAt *string `json:"updated_at"`

	// workflows
	Workflows *Workflows `json:"workflows,omitempty"`
}

// Validate validates this integration
func (m *Integration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkflows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Integration) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Integration) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var integrationTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["github"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationTypeProviderPropEnum = append(integrationTypeProviderPropEnum, v)
	}
}

const (

	// IntegrationProviderGithub captures enum value "github"
	IntegrationProviderGithub string = "github"
)

// prop value enum
func (m *Integration) validateProviderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, integrationTypeProviderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Integration) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	// value enum
	if err := m.validateProviderEnum("provider", "body", *m.Provider); err != nil {
		return err
	}

	return nil
}

var integrationTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unconfigured","configured"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationTypeStatusPropEnum = append(integrationTypeStatusPropEnum, v)
	}
}

const (

	// IntegrationStatusUnconfigured captures enum value "unconfigured"
	IntegrationStatusUnconfigured string = "unconfigured"

	// IntegrationStatusConfigured captures enum value "configured"
	IntegrationStatusConfigured string = "configured"
)

// prop value enum
func (m *Integration) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, integrationTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Integration) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Integration) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

func (m *Integration) validateWorkflows(formats strfmt.Registry) error {

	if swag.IsZero(m.Workflows) { // not required
		return nil
	}

	if m.Workflows != nil {
		if err := m.Workflows.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workflows")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Integration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Integration) UnmarshalBinary(b []byte) error {
	var res Integration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
