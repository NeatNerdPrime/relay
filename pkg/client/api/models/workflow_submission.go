// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkflowSubmission Required fields to create or update a workflow entry
// swagger:model WorkflowSubmission
type WorkflowSubmission struct {

	// The branch on which we should look for the workflow yaml
	// Required: true
	Branch *string `json:"branch"`

	// User provided friendly workflow description
	// Required: true
	Description *string `json:"description"`

	// ID of integration used by workflow
	// Required: true
	IntegrationID *string `json:"integration_id"`

	// name
	// Required: true
	Name WorkflowName `json:"name"`

	// Relative path from the repository root to the workflow file
	// Required: true
	Path *string `json:"path"`

	// A source repository slug.
	// Required: true
	Repository *string `json:"repository"`
}

// Validate validates this workflow submission
func (m *WorkflowSubmission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntegrationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkflowSubmission) validateBranch(formats strfmt.Registry) error {

	if err := validate.Required("branch", "body", m.Branch); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowSubmission) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowSubmission) validateIntegrationID(formats strfmt.Registry) error {

	if err := validate.Required("integration_id", "body", m.IntegrationID); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowSubmission) validateName(formats strfmt.Registry) error {

	if err := m.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("name")
		}
		return err
	}

	return nil
}

func (m *WorkflowSubmission) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *WorkflowSubmission) validateRepository(formats strfmt.Registry) error {

	if err := validate.Required("repository", "body", m.Repository); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkflowSubmission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkflowSubmission) UnmarshalBinary(b []byte) error {
	var res WorkflowSubmission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
