// Code generated by go-swagger; DO NOT EDIT.

package integrations_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new integrations v1 API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for integrations v1 API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CallbackIntegration thes o auth provider will redirect back through us to verify access credentials
*/
func (a *Client) CallbackIntegration(params *CallbackIntegrationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCallbackIntegrationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "callbackIntegration",
		Method:             "GET",
		PathPattern:        "/api/integrations/callback",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CallbackIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
CreateIntegration creates an integration belonging to your user
*/
func (a *Client) CreateIntegration(params *CreateIntegrationParams) (*CreateIntegrationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createIntegration",
		Method:             "POST",
		PathPattern:        "/api/integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateIntegrationCreated), nil

}

/*
DeleteIntegration deletes an integration by id
*/
func (a *Client) DeleteIntegration(params *DeleteIntegrationParams) (*DeleteIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteIntegration",
		Method:             "DELETE",
		PathPattern:        "/api/integrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteIntegrationOK), nil

}

/*
GetIntegration gets an integration by id
*/
func (a *Client) GetIntegration(params *GetIntegrationParams) (*GetIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIntegration",
		Method:             "GET",
		PathPattern:        "/api/integrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIntegrationOK), nil

}

/*
ListIntegrations lists all integrations that belong to user
*/
func (a *Client) ListIntegrations(params *ListIntegrationsParams) (*ListIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListIntegrationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listIntegrations",
		Method:             "GET",
		PathPattern:        "/api/integrations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListIntegrationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListIntegrationsOK), nil

}

/*
RedirectIntegration gets the oauth redirect information for integration with ID
*/
func (a *Client) RedirectIntegration(params *RedirectIntegrationParams) (*RedirectIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRedirectIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "redirectIntegration",
		Method:             "GET",
		PathPattern:        "/api/integrations/{id}/redirect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RedirectIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RedirectIntegrationOK), nil

}

/*
UpdateIntegration updates integration by id
*/
func (a *Client) UpdateIntegration(params *UpdateIntegrationParams) (*UpdateIntegrationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateIntegrationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateIntegration",
		Method:             "PUT",
		PathPattern:        "/api/integrations/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateIntegrationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateIntegrationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
