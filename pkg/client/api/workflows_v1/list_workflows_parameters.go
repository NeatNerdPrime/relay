// Code generated by go-swagger; DO NOT EDIT.

package workflows_v1

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListWorkflowsParams creates a new ListWorkflowsParams object
// with the default values initialized.
func NewListWorkflowsParams() *ListWorkflowsParams {
	var ()
	return &ListWorkflowsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListWorkflowsParamsWithTimeout creates a new ListWorkflowsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListWorkflowsParamsWithTimeout(timeout time.Duration) *ListWorkflowsParams {
	var ()
	return &ListWorkflowsParams{

		timeout: timeout,
	}
}

// NewListWorkflowsParamsWithContext creates a new ListWorkflowsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListWorkflowsParamsWithContext(ctx context.Context) *ListWorkflowsParams {
	var ()
	return &ListWorkflowsParams{

		Context: ctx,
	}
}

// NewListWorkflowsParamsWithHTTPClient creates a new ListWorkflowsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListWorkflowsParamsWithHTTPClient(client *http.Client) *ListWorkflowsParams {
	var ()
	return &ListWorkflowsParams{
		HTTPClient: client,
	}
}

/*ListWorkflowsParams contains all the parameters to send to the API endpoint
for the list workflows operation typically these are written to a http.Request
*/
type ListWorkflowsParams struct {

	/*Accept
	  The version of the API, in this case should be "application/nebula-api.v1+json"

	*/
	Accept string
	/*Branch
	  the branch to filter the results by

	*/
	Branch *string
	/*Path
	  the path of workflow yaml to filter the results by

	*/
	Path *string
	/*Repo
	  the repo to filter the results by

	*/
	Repo *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list workflows params
func (o *ListWorkflowsParams) WithTimeout(timeout time.Duration) *ListWorkflowsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list workflows params
func (o *ListWorkflowsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list workflows params
func (o *ListWorkflowsParams) WithContext(ctx context.Context) *ListWorkflowsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list workflows params
func (o *ListWorkflowsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list workflows params
func (o *ListWorkflowsParams) WithHTTPClient(client *http.Client) *ListWorkflowsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list workflows params
func (o *ListWorkflowsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccept adds the accept to the list workflows params
func (o *ListWorkflowsParams) WithAccept(accept string) *ListWorkflowsParams {
	o.SetAccept(accept)
	return o
}

// SetAccept adds the accept to the list workflows params
func (o *ListWorkflowsParams) SetAccept(accept string) {
	o.Accept = accept
}

// WithBranch adds the branch to the list workflows params
func (o *ListWorkflowsParams) WithBranch(branch *string) *ListWorkflowsParams {
	o.SetBranch(branch)
	return o
}

// SetBranch adds the branch to the list workflows params
func (o *ListWorkflowsParams) SetBranch(branch *string) {
	o.Branch = branch
}

// WithPath adds the path to the list workflows params
func (o *ListWorkflowsParams) WithPath(path *string) *ListWorkflowsParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the list workflows params
func (o *ListWorkflowsParams) SetPath(path *string) {
	o.Path = path
}

// WithRepo adds the repo to the list workflows params
func (o *ListWorkflowsParams) WithRepo(repo *string) *ListWorkflowsParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the list workflows params
func (o *ListWorkflowsParams) SetRepo(repo *string) {
	o.Repo = repo
}

// WriteToRequest writes these params to a swagger request
func (o *ListWorkflowsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param Accept
	if err := r.SetHeaderParam("Accept", o.Accept); err != nil {
		return err
	}

	if o.Branch != nil {

		// query param branch
		var qrBranch string
		if o.Branch != nil {
			qrBranch = *o.Branch
		}
		qBranch := qrBranch
		if qBranch != "" {
			if err := r.SetQueryParam("branch", qBranch); err != nil {
				return err
			}
		}

	}

	if o.Path != nil {

		// query param path
		var qrPath string
		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {
			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}

	}

	if o.Repo != nil {

		// query param repo
		var qrRepo string
		if o.Repo != nil {
			qrRepo = *o.Repo
		}
		qRepo := qrRepo
		if qRepo != "" {
			if err := r.SetQueryParam("repo", qRepo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
