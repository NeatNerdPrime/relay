// Code generated by go-swagger; DO NOT EDIT.

package access_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// GetAccountReader is a Reader for the GetAccount structure.
type GetAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetAccountDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAccountOK creates a GetAccountOK with default headers values
func NewGetAccountOK() *GetAccountOK {
	return &GetAccountOK{}
}

/*GetAccountOK handles this case with default header values.

Account metadata
*/
type GetAccountOK struct {
	Payload *GetAccountOKBody
}

func (o *GetAccountOK) Error() string {
	return fmt.Sprintf("[GET /api/account][%d] getAccountOK  %+v", 200, o.Payload)
}

func (o *GetAccountOK) GetPayload() *GetAccountOKBody {
	return o.Payload
}

func (o *GetAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAccountOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountDefault creates a GetAccountDefault with default headers values
func NewGetAccountDefault(code int) *GetAccountDefault {
	return &GetAccountDefault{
		_statusCode: code,
	}
}

/*GetAccountDefault handles this case with default header values.

An error occurred
*/
type GetAccountDefault struct {
	_statusCode int

	Payload *GetAccountDefaultBody
}

// Code gets the status code for the get account default response
func (o *GetAccountDefault) Code() int {
	return o._statusCode
}

func (o *GetAccountDefault) Error() string {
	return fmt.Sprintf("[GET /api/account][%d] getAccount default  %+v", o._statusCode, o.Payload)
}

func (o *GetAccountDefault) GetPayload() *GetAccountDefaultBody {
	return o.Payload
}

func (o *GetAccountDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAccountDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetAccountDefaultBody Error response
swagger:model GetAccountDefaultBody
*/
type GetAccountDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get account default body
func (o *GetAccountDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAccount default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetAccountDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAccountOKBody get account o k body
swagger:model GetAccountOKBody
*/
type GetAccountOKBody struct {
	models.AccountEntity

	// account
	Account *models.Account `json:"account,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetAccountOKBody) UnmarshalJSON(raw []byte) error {
	// GetAccountOKBodyAO0
	var getAccountOKBodyAO0 models.AccountEntity
	if err := swag.ReadJSON(raw, &getAccountOKBodyAO0); err != nil {
		return err
	}
	o.AccountEntity = getAccountOKBodyAO0

	// GetAccountOKBodyAO1
	var dataGetAccountOKBodyAO1 struct {
		Account *models.Account `json:"account,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetAccountOKBodyAO1); err != nil {
		return err
	}

	o.Account = dataGetAccountOKBodyAO1.Account

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetAccountOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getAccountOKBodyAO0, err := swag.WriteJSON(o.AccountEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getAccountOKBodyAO0)
	var dataGetAccountOKBodyAO1 struct {
		Account *models.Account `json:"account,omitempty"`
	}

	dataGetAccountOKBodyAO1.Account = o.Account

	jsonDataGetAccountOKBodyAO1, errGetAccountOKBodyAO1 := swag.WriteJSON(dataGetAccountOKBodyAO1)
	if errGetAccountOKBodyAO1 != nil {
		return nil, errGetAccountOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetAccountOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get account o k body
func (o *GetAccountOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.AccountEntity
	if err := o.AccountEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAccount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccountOKBody) validateAccount(formats strfmt.Registry) error {

	if swag.IsZero(o.Account) { // not required
		return nil
	}

	if o.Account != nil {
		if err := o.Account.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAccountOK" + "." + "account")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccountOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccountOKBody) UnmarshalBinary(b []byte) error {
	var res GetAccountOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
