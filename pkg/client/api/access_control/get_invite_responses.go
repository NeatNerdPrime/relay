// Code generated by go-swagger; DO NOT EDIT.

package access_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/puppetlabs/relay/pkg/client/api/models"
)

// GetInviteReader is a Reader for the GetInvite structure.
type GetInviteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInviteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInviteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetInviteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetInviteOK creates a GetInviteOK with default headers values
func NewGetInviteOK() *GetInviteOK {
	return &GetInviteOK{}
}

/*GetInviteOK handles this case with default header values.

The requested invite representation
*/
type GetInviteOK struct {
	Payload *GetInviteOKBody
}

func (o *GetInviteOK) Error() string {
	return fmt.Sprintf("[GET /api/invites/{inviteId}][%d] getInviteOK  %+v", 200, o.Payload)
}

func (o *GetInviteOK) GetPayload() *GetInviteOKBody {
	return o.Payload
}

func (o *GetInviteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetInviteOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInviteDefault creates a GetInviteDefault with default headers values
func NewGetInviteDefault(code int) *GetInviteDefault {
	return &GetInviteDefault{
		_statusCode: code,
	}
}

/*GetInviteDefault handles this case with default header values.

An error occurred
*/
type GetInviteDefault struct {
	_statusCode int

	Payload *GetInviteDefaultBody
}

// Code gets the status code for the get invite default response
func (o *GetInviteDefault) Code() int {
	return o._statusCode
}

func (o *GetInviteDefault) Error() string {
	return fmt.Sprintf("[GET /api/invites/{inviteId}][%d] getInvite default  %+v", o._statusCode, o.Payload)
}

func (o *GetInviteDefault) GetPayload() *GetInviteDefaultBody {
	return o.Payload
}

func (o *GetInviteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetInviteDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetInviteDefaultBody Error response
swagger:model GetInviteDefaultBody
*/
type GetInviteDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get invite default body
func (o *GetInviteDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInviteDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInvite default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInviteDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInviteDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetInviteDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetInviteOKBody get invite o k body
swagger:model GetInviteOKBody
*/
type GetInviteOKBody struct {
	models.InviteEntity

	// invite
	Invite *models.Invite `json:"invite,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetInviteOKBody) UnmarshalJSON(raw []byte) error {
	// GetInviteOKBodyAO0
	var getInviteOKBodyAO0 models.InviteEntity
	if err := swag.ReadJSON(raw, &getInviteOKBodyAO0); err != nil {
		return err
	}
	o.InviteEntity = getInviteOKBodyAO0

	// GetInviteOKBodyAO1
	var dataGetInviteOKBodyAO1 struct {
		Invite *models.Invite `json:"invite,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetInviteOKBodyAO1); err != nil {
		return err
	}

	o.Invite = dataGetInviteOKBodyAO1.Invite

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetInviteOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getInviteOKBodyAO0, err := swag.WriteJSON(o.InviteEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getInviteOKBodyAO0)
	var dataGetInviteOKBodyAO1 struct {
		Invite *models.Invite `json:"invite,omitempty"`
	}

	dataGetInviteOKBodyAO1.Invite = o.Invite

	jsonDataGetInviteOKBodyAO1, errGetInviteOKBodyAO1 := swag.WriteJSON(dataGetInviteOKBodyAO1)
	if errGetInviteOKBodyAO1 != nil {
		return nil, errGetInviteOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetInviteOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get invite o k body
func (o *GetInviteOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.InviteEntity
	if err := o.InviteEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInvite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInviteOKBody) validateInvite(formats strfmt.Registry) error {

	if swag.IsZero(o.Invite) { // not required
		return nil
	}

	if o.Invite != nil {
		if err := o.Invite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInviteOK" + "." + "invite")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInviteOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInviteOKBody) UnmarshalBinary(b []byte) error {
	var res GetInviteOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
