// Code generated by go-swagger; DO NOT EDIT.

package access_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// UpdateUserReader is a Reader for the UpdateUser structure.
type UpdateUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpdateUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateUserOK creates a UpdateUserOK with default headers values
func NewUpdateUserOK() *UpdateUserOK {
	return &UpdateUserOK{}
}

/*UpdateUserOK handles this case with default header values.

An updated user representation
*/
type UpdateUserOK struct {
	Payload *UpdateUserOKBody
}

func (o *UpdateUserOK) Error() string {
	return fmt.Sprintf("[PUT /api/users/{userId}][%d] updateUserOK  %+v", 200, o.Payload)
}

func (o *UpdateUserOK) GetPayload() *UpdateUserOKBody {
	return o.Payload
}

func (o *UpdateUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateUserDefault creates a UpdateUserDefault with default headers values
func NewUpdateUserDefault(code int) *UpdateUserDefault {
	return &UpdateUserDefault{
		_statusCode: code,
	}
}

/*UpdateUserDefault handles this case with default header values.

An error occurred
*/
type UpdateUserDefault struct {
	_statusCode int

	Payload *UpdateUserDefaultBody
}

// Code gets the status code for the update user default response
func (o *UpdateUserDefault) Code() int {
	return o._statusCode
}

func (o *UpdateUserDefault) Error() string {
	return fmt.Sprintf("[PUT /api/users/{userId}][%d] updateUser default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateUserDefault) GetPayload() *UpdateUserDefaultBody {
	return o.Payload
}

func (o *UpdateUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateUserDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateUserBody The request type for updating an account user
swagger:model UpdateUserBody
*/
type UpdateUserBody struct {

	// User name
	Name string `json:"name,omitempty"`

	// The roles to replace in this account
	Roles []*models.RoleIdentifier `json:"roles"`
}

// Validate validates this update user body
func (o *UpdateUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserBody) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(o.Roles) { // not required
		return nil
	}

	for i := 0; i < len(o.Roles); i++ {
		if swag.IsZero(o.Roles[i]) { // not required
			continue
		}

		if o.Roles[i] != nil {
			if err := o.Roles[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "roles" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserDefaultBody Error response
swagger:model UpdateUserDefaultBody
*/
type UpdateUserDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this update user default body
func (o *UpdateUserDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateUser default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserDefaultBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateUserOKBody update user o k body
swagger:model UpdateUserOKBody
*/
type UpdateUserOKBody struct {
	models.UserEntity

	// user
	User *models.User `json:"user,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *UpdateUserOKBody) UnmarshalJSON(raw []byte) error {
	// UpdateUserOKBodyAO0
	var updateUserOKBodyAO0 models.UserEntity
	if err := swag.ReadJSON(raw, &updateUserOKBodyAO0); err != nil {
		return err
	}
	o.UserEntity = updateUserOKBodyAO0

	// UpdateUserOKBodyAO1
	var dataUpdateUserOKBodyAO1 struct {
		User *models.User `json:"user,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataUpdateUserOKBodyAO1); err != nil {
		return err
	}

	o.User = dataUpdateUserOKBodyAO1.User

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o UpdateUserOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	updateUserOKBodyAO0, err := swag.WriteJSON(o.UserEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, updateUserOKBodyAO0)

	var dataUpdateUserOKBodyAO1 struct {
		User *models.User `json:"user,omitempty"`
	}

	dataUpdateUserOKBodyAO1.User = o.User

	jsonDataUpdateUserOKBodyAO1, errUpdateUserOKBodyAO1 := swag.WriteJSON(dataUpdateUserOKBodyAO1)
	if errUpdateUserOKBodyAO1 != nil {
		return nil, errUpdateUserOKBodyAO1
	}
	_parts = append(_parts, jsonDataUpdateUserOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this update user o k body
func (o *UpdateUserOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.UserEntity
	if err := o.UserEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateUserOKBody) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(o.User) { // not required
		return nil
	}

	if o.User != nil {
		if err := o.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateUserOK" + "." + "user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateUserOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateUserOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateUserOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
