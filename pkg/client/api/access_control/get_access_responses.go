// Code generated by go-swagger; DO NOT EDIT.

package access_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/puppetlabs/relay/pkg/client/api/models"
)

// GetAccessReader is a Reader for the GetAccess structure.
type GetAccessReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccessReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccessOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetAccessDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetAccessOK creates a GetAccessOK with default headers values
func NewGetAccessOK() *GetAccessOK {
	return &GetAccessOK{}
}

/*GetAccessOK handles this case with default header values.

Resolved permissions
*/
type GetAccessOK struct {
	Payload *GetAccessOKBody
}

func (o *GetAccessOK) Error() string {
	return fmt.Sprintf("[GET /api/access][%d] getAccessOK  %+v", 200, o.Payload)
}

func (o *GetAccessOK) GetPayload() *GetAccessOKBody {
	return o.Payload
}

func (o *GetAccessOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAccessOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessDefault creates a GetAccessDefault with default headers values
func NewGetAccessDefault(code int) *GetAccessDefault {
	return &GetAccessDefault{
		_statusCode: code,
	}
}

/*GetAccessDefault handles this case with default header values.

An error occurred
*/
type GetAccessDefault struct {
	_statusCode int

	Payload *GetAccessDefaultBody
}

// Code gets the status code for the get access default response
func (o *GetAccessDefault) Code() int {
	return o._statusCode
}

func (o *GetAccessDefault) Error() string {
	return fmt.Sprintf("[GET /api/access][%d] getAccess default  %+v", o._statusCode, o.Payload)
}

func (o *GetAccessDefault) GetPayload() *GetAccessDefaultBody {
	return o.Payload
}

func (o *GetAccessDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetAccessDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetAccessDefaultBody Error response
swagger:model GetAccessDefaultBody
*/
type GetAccessDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get access default body
func (o *GetAccessDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccessDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getAccess default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccessDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccessDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetAccessDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetAccessOKBody The response type for access to global entities
swagger:model GetAccessOKBody
*/
type GetAccessOKBody struct {

	// The global grants associated with this user
	PermissionGrants []*models.PermissionGrant `json:"permission_grants"`
}

// Validate validates this get access o k body
func (o *GetAccessOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePermissionGrants(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetAccessOKBody) validatePermissionGrants(formats strfmt.Registry) error {

	if swag.IsZero(o.PermissionGrants) { // not required
		return nil
	}

	for i := 0; i < len(o.PermissionGrants); i++ {
		if swag.IsZero(o.PermissionGrants[i]) { // not required
			continue
		}

		if o.PermissionGrants[i] != nil {
			if err := o.PermissionGrants[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getAccessOK" + "." + "permission_grants" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetAccessOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetAccessOKBody) UnmarshalBinary(b []byte) error {
	var res GetAccessOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
