// Code generated by go-swagger; DO NOT EDIT.

package access_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// GetPermissionsReader is a Reader for the GetPermissions structure.
type GetPermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetPermissionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetPermissionsOK creates a GetPermissionsOK with default headers values
func NewGetPermissionsOK() *GetPermissionsOK {
	return &GetPermissionsOK{}
}

/*GetPermissionsOK handles this case with default header values.

A list of permissions
*/
type GetPermissionsOK struct {
	Payload *GetPermissionsOKBody
}

func (o *GetPermissionsOK) Error() string {
	return fmt.Sprintf("[GET /api/permissions][%d] getPermissionsOK  %+v", 200, o.Payload)
}

func (o *GetPermissionsOK) GetPayload() *GetPermissionsOKBody {
	return o.Payload
}

func (o *GetPermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPermissionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPermissionsDefault creates a GetPermissionsDefault with default headers values
func NewGetPermissionsDefault(code int) *GetPermissionsDefault {
	return &GetPermissionsDefault{
		_statusCode: code,
	}
}

/*GetPermissionsDefault handles this case with default header values.

An error occurred
*/
type GetPermissionsDefault struct {
	_statusCode int

	Payload *GetPermissionsDefaultBody
}

// Code gets the status code for the get permissions default response
func (o *GetPermissionsDefault) Code() int {
	return o._statusCode
}

func (o *GetPermissionsDefault) Error() string {
	return fmt.Sprintf("[GET /api/permissions][%d] getPermissions default  %+v", o._statusCode, o.Payload)
}

func (o *GetPermissionsDefault) GetPayload() *GetPermissionsDefaultBody {
	return o.Payload
}

func (o *GetPermissionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetPermissionsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetPermissionsDefaultBody Error response
swagger:model GetPermissionsDefaultBody
*/
type GetPermissionsDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get permissions default body
func (o *GetPermissionsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPermissionsDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getPermissions default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPermissionsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPermissionsDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetPermissionsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetPermissionsOKBody The response type for the global permissions list
swagger:model GetPermissionsOKBody
*/
type GetPermissionsOKBody struct {

	// A list of permissions
	Permissions []*models.Permission `json:"permissions"`
}

// Validate validates this get permissions o k body
func (o *GetPermissionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPermissionsOKBody) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(o.Permissions); i++ {
		if swag.IsZero(o.Permissions[i]) { // not required
			continue
		}

		if o.Permissions[i] != nil {
			if err := o.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getPermissionsOK" + "." + "permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPermissionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPermissionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetPermissionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
