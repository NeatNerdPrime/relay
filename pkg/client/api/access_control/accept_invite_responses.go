// Code generated by go-swagger; DO NOT EDIT.

package access_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/puppetlabs/relay/pkg/client/api/models"
)

// AcceptInviteReader is a Reader for the AcceptInvite structure.
type AcceptInviteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptInviteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptInviteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAcceptInviteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAcceptInviteOK creates a AcceptInviteOK with default headers values
func NewAcceptInviteOK() *AcceptInviteOK {
	return &AcceptInviteOK{}
}

/*AcceptInviteOK handles this case with default header values.

The invite was succesfully accepted and corresponding user account created
*/
type AcceptInviteOK struct {
	Payload *AcceptInviteOKBody
}

func (o *AcceptInviteOK) Error() string {
	return fmt.Sprintf("[POST /api/invites/{inviteId}/accept][%d] acceptInviteOK  %+v", 200, o.Payload)
}

func (o *AcceptInviteOK) GetPayload() *AcceptInviteOKBody {
	return o.Payload
}

func (o *AcceptInviteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AcceptInviteOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptInviteDefault creates a AcceptInviteDefault with default headers values
func NewAcceptInviteDefault(code int) *AcceptInviteDefault {
	return &AcceptInviteDefault{
		_statusCode: code,
	}
}

/*AcceptInviteDefault handles this case with default header values.

An error occurred
*/
type AcceptInviteDefault struct {
	_statusCode int

	Payload *AcceptInviteDefaultBody
}

// Code gets the status code for the accept invite default response
func (o *AcceptInviteDefault) Code() int {
	return o._statusCode
}

func (o *AcceptInviteDefault) Error() string {
	return fmt.Sprintf("[POST /api/invites/{inviteId}/accept][%d] acceptInvite default  %+v", o._statusCode, o.Payload)
}

func (o *AcceptInviteDefault) GetPayload() *AcceptInviteDefaultBody {
	return o.Payload
}

func (o *AcceptInviteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AcceptInviteDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AcceptInviteBody The request type for accepting an invite
swagger:model AcceptInviteBody
*/
type AcceptInviteBody struct {

	// The password for the new account
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this accept invite body
func (o *AcceptInviteBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AcceptInviteBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AcceptInviteBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AcceptInviteBody) UnmarshalBinary(b []byte) error {
	var res AcceptInviteBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AcceptInviteDefaultBody Error response
swagger:model AcceptInviteDefaultBody
*/
type AcceptInviteDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this accept invite default body
func (o *AcceptInviteDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AcceptInviteDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acceptInvite default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AcceptInviteDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AcceptInviteDefaultBody) UnmarshalBinary(b []byte) error {
	var res AcceptInviteDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AcceptInviteOKBody accept invite o k body
swagger:model AcceptInviteOKBody
*/
type AcceptInviteOKBody struct {
	models.InviteEntity

	// invite
	Invite *models.Invite `json:"invite,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AcceptInviteOKBody) UnmarshalJSON(raw []byte) error {
	// AcceptInviteOKBodyAO0
	var acceptInviteOKBodyAO0 models.InviteEntity
	if err := swag.ReadJSON(raw, &acceptInviteOKBodyAO0); err != nil {
		return err
	}
	o.InviteEntity = acceptInviteOKBodyAO0

	// AcceptInviteOKBodyAO1
	var dataAcceptInviteOKBodyAO1 struct {
		Invite *models.Invite `json:"invite,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAcceptInviteOKBodyAO1); err != nil {
		return err
	}

	o.Invite = dataAcceptInviteOKBodyAO1.Invite

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AcceptInviteOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	acceptInviteOKBodyAO0, err := swag.WriteJSON(o.InviteEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, acceptInviteOKBodyAO0)
	var dataAcceptInviteOKBodyAO1 struct {
		Invite *models.Invite `json:"invite,omitempty"`
	}

	dataAcceptInviteOKBodyAO1.Invite = o.Invite

	jsonDataAcceptInviteOKBodyAO1, errAcceptInviteOKBodyAO1 := swag.WriteJSON(dataAcceptInviteOKBodyAO1)
	if errAcceptInviteOKBodyAO1 != nil {
		return nil, errAcceptInviteOKBodyAO1
	}
	_parts = append(_parts, jsonDataAcceptInviteOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this accept invite o k body
func (o *AcceptInviteOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.InviteEntity
	if err := o.InviteEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInvite(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AcceptInviteOKBody) validateInvite(formats strfmt.Registry) error {

	if swag.IsZero(o.Invite) { // not required
		return nil
	}

	if o.Invite != nil {
		if err := o.Invite.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acceptInviteOK" + "." + "invite")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AcceptInviteOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AcceptInviteOKBody) UnmarshalBinary(b []byte) error {
	var res AcceptInviteOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
