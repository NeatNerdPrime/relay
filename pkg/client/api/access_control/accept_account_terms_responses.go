// Code generated by go-swagger; DO NOT EDIT.

package access_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// AcceptAccountTermsReader is a Reader for the AcceptAccountTerms structure.
type AcceptAccountTermsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AcceptAccountTermsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAcceptAccountTermsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewAcceptAccountTermsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAcceptAccountTermsOK creates a AcceptAccountTermsOK with default headers values
func NewAcceptAccountTermsOK() *AcceptAccountTermsOK {
	return &AcceptAccountTermsOK{}
}

/*AcceptAccountTermsOK handles this case with default header values.

The terms and conditions are accepted
*/
type AcceptAccountTermsOK struct {
	Payload *AcceptAccountTermsOKBody
}

func (o *AcceptAccountTermsOK) Error() string {
	return fmt.Sprintf("[POST /api/account/terms/accept][%d] acceptAccountTermsOK  %+v", 200, o.Payload)
}

func (o *AcceptAccountTermsOK) GetPayload() *AcceptAccountTermsOKBody {
	return o.Payload
}

func (o *AcceptAccountTermsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AcceptAccountTermsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAcceptAccountTermsDefault creates a AcceptAccountTermsDefault with default headers values
func NewAcceptAccountTermsDefault(code int) *AcceptAccountTermsDefault {
	return &AcceptAccountTermsDefault{
		_statusCode: code,
	}
}

/*AcceptAccountTermsDefault handles this case with default header values.

An error occurred
*/
type AcceptAccountTermsDefault struct {
	_statusCode int

	Payload *AcceptAccountTermsDefaultBody
}

// Code gets the status code for the accept account terms default response
func (o *AcceptAccountTermsDefault) Code() int {
	return o._statusCode
}

func (o *AcceptAccountTermsDefault) Error() string {
	return fmt.Sprintf("[POST /api/account/terms/accept][%d] acceptAccountTerms default  %+v", o._statusCode, o.Payload)
}

func (o *AcceptAccountTermsDefault) GetPayload() *AcceptAccountTermsDefaultBody {
	return o.Payload
}

func (o *AcceptAccountTermsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AcceptAccountTermsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AcceptAccountTermsBody The request type for accepting the terms and conditions
swagger:model AcceptAccountTermsBody
*/
type AcceptAccountTermsBody struct {

	// The version of the terms and conditions to accept
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this accept account terms body
func (o *AcceptAccountTermsBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AcceptAccountTermsBody) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"version", "body", o.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AcceptAccountTermsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AcceptAccountTermsBody) UnmarshalBinary(b []byte) error {
	var res AcceptAccountTermsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AcceptAccountTermsDefaultBody Error response
swagger:model AcceptAccountTermsDefaultBody
*/
type AcceptAccountTermsDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this accept account terms default body
func (o *AcceptAccountTermsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AcceptAccountTermsDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acceptAccountTerms default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AcceptAccountTermsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AcceptAccountTermsDefaultBody) UnmarshalBinary(b []byte) error {
	var res AcceptAccountTermsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AcceptAccountTermsOKBody accept account terms o k body
swagger:model AcceptAccountTermsOKBody
*/
type AcceptAccountTermsOKBody struct {
	models.Entity

	// accepted terms
	AcceptedTerms *models.AcceptedTerms `json:"accepted_terms,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *AcceptAccountTermsOKBody) UnmarshalJSON(raw []byte) error {
	// AcceptAccountTermsOKBodyAO0
	var acceptAccountTermsOKBodyAO0 models.Entity
	if err := swag.ReadJSON(raw, &acceptAccountTermsOKBodyAO0); err != nil {
		return err
	}
	o.Entity = acceptAccountTermsOKBodyAO0

	// AcceptAccountTermsOKBodyAO1
	var dataAcceptAccountTermsOKBodyAO1 struct {
		AcceptedTerms *models.AcceptedTerms `json:"accepted_terms,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAcceptAccountTermsOKBodyAO1); err != nil {
		return err
	}

	o.AcceptedTerms = dataAcceptAccountTermsOKBodyAO1.AcceptedTerms

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o AcceptAccountTermsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	acceptAccountTermsOKBodyAO0, err := swag.WriteJSON(o.Entity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, acceptAccountTermsOKBodyAO0)

	var dataAcceptAccountTermsOKBodyAO1 struct {
		AcceptedTerms *models.AcceptedTerms `json:"accepted_terms,omitempty"`
	}

	dataAcceptAccountTermsOKBodyAO1.AcceptedTerms = o.AcceptedTerms

	jsonDataAcceptAccountTermsOKBodyAO1, errAcceptAccountTermsOKBodyAO1 := swag.WriteJSON(dataAcceptAccountTermsOKBodyAO1)
	if errAcceptAccountTermsOKBodyAO1 != nil {
		return nil, errAcceptAccountTermsOKBodyAO1
	}
	_parts = append(_parts, jsonDataAcceptAccountTermsOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this accept account terms o k body
func (o *AcceptAccountTermsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.Entity
	if err := o.Entity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateAcceptedTerms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AcceptAccountTermsOKBody) validateAcceptedTerms(formats strfmt.Registry) error {

	if swag.IsZero(o.AcceptedTerms) { // not required
		return nil
	}

	if o.AcceptedTerms != nil {
		if err := o.AcceptedTerms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acceptAccountTermsOK" + "." + "accepted_terms")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *AcceptAccountTermsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AcceptAccountTermsOKBody) UnmarshalBinary(b []byte) error {
	var res AcceptAccountTermsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
