// Code generated by go-swagger; DO NOT EDIT.

package access_control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// GetRolePermissionsReader is a Reader for the GetRolePermissions structure.
type GetRolePermissionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRolePermissionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRolePermissionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetRolePermissionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRolePermissionsOK creates a GetRolePermissionsOK with default headers values
func NewGetRolePermissionsOK() *GetRolePermissionsOK {
	return &GetRolePermissionsOK{}
}

/*GetRolePermissionsOK handles this case with default header values.

The list of permission attachments
*/
type GetRolePermissionsOK struct {
	Payload *GetRolePermissionsOKBody
}

func (o *GetRolePermissionsOK) Error() string {
	return fmt.Sprintf("[GET /api/roles/{roleId}/permissions][%d] getRolePermissionsOK  %+v", 200, o.Payload)
}

func (o *GetRolePermissionsOK) GetPayload() *GetRolePermissionsOKBody {
	return o.Payload
}

func (o *GetRolePermissionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRolePermissionsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRolePermissionsDefault creates a GetRolePermissionsDefault with default headers values
func NewGetRolePermissionsDefault(code int) *GetRolePermissionsDefault {
	return &GetRolePermissionsDefault{
		_statusCode: code,
	}
}

/*GetRolePermissionsDefault handles this case with default header values.

An error occurred
*/
type GetRolePermissionsDefault struct {
	_statusCode int

	Payload *GetRolePermissionsDefaultBody
}

// Code gets the status code for the get role permissions default response
func (o *GetRolePermissionsDefault) Code() int {
	return o._statusCode
}

func (o *GetRolePermissionsDefault) Error() string {
	return fmt.Sprintf("[GET /api/roles/{roleId}/permissions][%d] getRolePermissions default  %+v", o._statusCode, o.Payload)
}

func (o *GetRolePermissionsDefault) GetPayload() *GetRolePermissionsDefaultBody {
	return o.Payload
}

func (o *GetRolePermissionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRolePermissionsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetRolePermissionsDefaultBody Error response
swagger:model GetRolePermissionsDefaultBody
*/
type GetRolePermissionsDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get role permissions default body
func (o *GetRolePermissionsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRolePermissionsDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getRolePermissions default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRolePermissionsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRolePermissionsDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetRolePermissionsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetRolePermissionsOKBody The response type for listing the permissions assigned to a role
swagger:model GetRolePermissionsOKBody
*/
type GetRolePermissionsOKBody struct {

	// The permissions assigned to this role
	Permissions []*models.RolePermission `json:"permissions"`
}

// Validate validates this get role permissions o k body
func (o *GetRolePermissionsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRolePermissionsOKBody) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(o.Permissions) { // not required
		return nil
	}

	for i := 0; i < len(o.Permissions); i++ {
		if swag.IsZero(o.Permissions[i]) { // not required
			continue
		}

		if o.Permissions[i] != nil {
			if err := o.Permissions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getRolePermissionsOK" + "." + "permissions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRolePermissionsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRolePermissionsOKBody) UnmarshalBinary(b []byte) error {
	var res GetRolePermissionsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
