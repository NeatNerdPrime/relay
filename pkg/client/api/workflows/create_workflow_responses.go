// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// CreateWorkflowReader is a Reader for the CreateWorkflow structure.
type CreateWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateWorkflowCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCreateWorkflowDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateWorkflowCreated creates a CreateWorkflowCreated with default headers values
func NewCreateWorkflowCreated() *CreateWorkflowCreated {
	return &CreateWorkflowCreated{}
}

/*CreateWorkflowCreated handles this case with default header values.

Newly created workflow
*/
type CreateWorkflowCreated struct {
	Payload *CreateWorkflowCreatedBody
}

func (o *CreateWorkflowCreated) Error() string {
	return fmt.Sprintf("[POST /api/workflows][%d] createWorkflowCreated  %+v", 201, o.Payload)
}

func (o *CreateWorkflowCreated) GetPayload() *CreateWorkflowCreatedBody {
	return o.Payload
}

func (o *CreateWorkflowCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateWorkflowCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWorkflowDefault creates a CreateWorkflowDefault with default headers values
func NewCreateWorkflowDefault(code int) *CreateWorkflowDefault {
	return &CreateWorkflowDefault{
		_statusCode: code,
	}
}

/*CreateWorkflowDefault handles this case with default header values.

An error occurred
*/
type CreateWorkflowDefault struct {
	_statusCode int

	Payload *CreateWorkflowDefaultBody
}

// Code gets the status code for the create workflow default response
func (o *CreateWorkflowDefault) Code() int {
	return o._statusCode
}

func (o *CreateWorkflowDefault) Error() string {
	return fmt.Sprintf("[POST /api/workflows][%d] createWorkflow default  %+v", o._statusCode, o.Payload)
}

func (o *CreateWorkflowDefault) GetPayload() *CreateWorkflowDefaultBody {
	return o.Payload
}

func (o *CreateWorkflowDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateWorkflowDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateWorkflowBody Required fields to create a workflow entry
swagger:model CreateWorkflowBody
*/
type CreateWorkflowBody struct {

	// The branch on which we should look for the workflow yaml
	// Required: true
	Branch *string `json:"branch"`

	// User provided friendly workflow description
	Description string `json:"description,omitempty"`

	// integration
	// Required: true
	Integration *models.IntegrationIdentifier `json:"integration"`

	// name
	// Required: true
	Name models.WorkflowName `json:"name"`

	// Relative path from the repository root to the workflow file
	// Required: true
	Path *string `json:"path"`

	// A source repository slug.
	// Required: true
	Repository *string `json:"repository"`
}

// Validate validates this create workflow body
func (o *CreateWorkflowBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIntegration(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateWorkflowBody) validateBranch(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"branch", "body", o.Branch); err != nil {
		return err
	}

	return nil
}

func (o *CreateWorkflowBody) validateIntegration(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"integration", "body", o.Integration); err != nil {
		return err
	}

	if o.Integration != nil {
		if err := o.Integration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "integration")
			}
			return err
		}
	}

	return nil
}

func (o *CreateWorkflowBody) validateName(formats strfmt.Registry) error {

	if err := o.Name.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "name")
		}
		return err
	}

	return nil
}

func (o *CreateWorkflowBody) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"path", "body", o.Path); err != nil {
		return err
	}

	return nil
}

func (o *CreateWorkflowBody) validateRepository(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"repository", "body", o.Repository); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateWorkflowBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateWorkflowBody) UnmarshalBinary(b []byte) error {
	var res CreateWorkflowBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateWorkflowCreatedBody create workflow created body
swagger:model CreateWorkflowCreatedBody
*/
type CreateWorkflowCreatedBody struct {
	models.WorkflowEntity

	// workflow
	Workflow *models.Workflow `json:"workflow,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *CreateWorkflowCreatedBody) UnmarshalJSON(raw []byte) error {
	// CreateWorkflowCreatedBodyAO0
	var createWorkflowCreatedBodyAO0 models.WorkflowEntity
	if err := swag.ReadJSON(raw, &createWorkflowCreatedBodyAO0); err != nil {
		return err
	}
	o.WorkflowEntity = createWorkflowCreatedBodyAO0

	// CreateWorkflowCreatedBodyAO1
	var dataCreateWorkflowCreatedBodyAO1 struct {
		Workflow *models.Workflow `json:"workflow,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataCreateWorkflowCreatedBodyAO1); err != nil {
		return err
	}

	o.Workflow = dataCreateWorkflowCreatedBodyAO1.Workflow

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o CreateWorkflowCreatedBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	createWorkflowCreatedBodyAO0, err := swag.WriteJSON(o.WorkflowEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, createWorkflowCreatedBodyAO0)

	var dataCreateWorkflowCreatedBodyAO1 struct {
		Workflow *models.Workflow `json:"workflow,omitempty"`
	}

	dataCreateWorkflowCreatedBodyAO1.Workflow = o.Workflow

	jsonDataCreateWorkflowCreatedBodyAO1, errCreateWorkflowCreatedBodyAO1 := swag.WriteJSON(dataCreateWorkflowCreatedBodyAO1)
	if errCreateWorkflowCreatedBodyAO1 != nil {
		return nil, errCreateWorkflowCreatedBodyAO1
	}
	_parts = append(_parts, jsonDataCreateWorkflowCreatedBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create workflow created body
func (o *CreateWorkflowCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.WorkflowEntity
	if err := o.WorkflowEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateWorkflowCreatedBody) validateWorkflow(formats strfmt.Registry) error {

	if swag.IsZero(o.Workflow) { // not required
		return nil
	}

	if o.Workflow != nil {
		if err := o.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createWorkflowCreated" + "." + "workflow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateWorkflowCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateWorkflowCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateWorkflowCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateWorkflowDefaultBody Error response
swagger:model CreateWorkflowDefaultBody
*/
type CreateWorkflowDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this create workflow default body
func (o *CreateWorkflowDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateWorkflowDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createWorkflow default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateWorkflowDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateWorkflowDefaultBody) UnmarshalBinary(b []byte) error {
	var res CreateWorkflowDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
