// Code generated by go-swagger; DO NOT EDIT.

package workflows

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// UpdateWorkflowReader is a Reader for the UpdateWorkflow structure.
type UpdateWorkflowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateWorkflowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateWorkflowOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewUpdateWorkflowDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateWorkflowOK creates a UpdateWorkflowOK with default headers values
func NewUpdateWorkflowOK() *UpdateWorkflowOK {
	return &UpdateWorkflowOK{}
}

/*UpdateWorkflowOK handles this case with default header values.

Update successful
*/
type UpdateWorkflowOK struct {
	Payload *UpdateWorkflowOKBody
}

func (o *UpdateWorkflowOK) Error() string {
	return fmt.Sprintf("[PUT /api/workflows/{workflowName}][%d] updateWorkflowOK  %+v", 200, o.Payload)
}

func (o *UpdateWorkflowOK) GetPayload() *UpdateWorkflowOKBody {
	return o.Payload
}

func (o *UpdateWorkflowOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateWorkflowOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateWorkflowDefault creates a UpdateWorkflowDefault with default headers values
func NewUpdateWorkflowDefault(code int) *UpdateWorkflowDefault {
	return &UpdateWorkflowDefault{
		_statusCode: code,
	}
}

/*UpdateWorkflowDefault handles this case with default header values.

An error occurred
*/
type UpdateWorkflowDefault struct {
	_statusCode int

	Payload *UpdateWorkflowDefaultBody
}

// Code gets the status code for the update workflow default response
func (o *UpdateWorkflowDefault) Code() int {
	return o._statusCode
}

func (o *UpdateWorkflowDefault) Error() string {
	return fmt.Sprintf("[PUT /api/workflows/{workflowName}][%d] updateWorkflow default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateWorkflowDefault) GetPayload() *UpdateWorkflowDefaultBody {
	return o.Payload
}

func (o *UpdateWorkflowDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateWorkflowDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateWorkflowBody Required fields to update a workflow entry
swagger:model UpdateWorkflowBody
*/
type UpdateWorkflowBody struct {

	// The branch on which we should look for the workflow yaml
	// Required: true
	Branch *string `json:"branch"`

	// User provided friendly workflow description
	Description string `json:"description,omitempty"`

	// integration
	// Required: true
	Integration *models.IntegrationIdentifier `json:"integration"`

	// Relative path from the repository root to the workflow file
	// Required: true
	Path *string `json:"path"`

	// A source repository slug.
	// Required: true
	Repository *string `json:"repository"`
}

// Validate validates this update workflow body
func (o *UpdateWorkflowBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIntegration(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateWorkflowBody) validateBranch(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"branch", "body", o.Branch); err != nil {
		return err
	}

	return nil
}

func (o *UpdateWorkflowBody) validateIntegration(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"integration", "body", o.Integration); err != nil {
		return err
	}

	if o.Integration != nil {
		if err := o.Integration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "integration")
			}
			return err
		}
	}

	return nil
}

func (o *UpdateWorkflowBody) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"path", "body", o.Path); err != nil {
		return err
	}

	return nil
}

func (o *UpdateWorkflowBody) validateRepository(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"repository", "body", o.Repository); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateWorkflowBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateWorkflowBody) UnmarshalBinary(b []byte) error {
	var res UpdateWorkflowBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateWorkflowDefaultBody Error response
swagger:model UpdateWorkflowDefaultBody
*/
type UpdateWorkflowDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this update workflow default body
func (o *UpdateWorkflowDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateWorkflowDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateWorkflow default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateWorkflowDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateWorkflowDefaultBody) UnmarshalBinary(b []byte) error {
	var res UpdateWorkflowDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*UpdateWorkflowOKBody update workflow o k body
swagger:model UpdateWorkflowOKBody
*/
type UpdateWorkflowOKBody struct {
	models.WorkflowEntity

	// workflow
	Workflow *models.Workflow `json:"workflow,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *UpdateWorkflowOKBody) UnmarshalJSON(raw []byte) error {
	// UpdateWorkflowOKBodyAO0
	var updateWorkflowOKBodyAO0 models.WorkflowEntity
	if err := swag.ReadJSON(raw, &updateWorkflowOKBodyAO0); err != nil {
		return err
	}
	o.WorkflowEntity = updateWorkflowOKBodyAO0

	// UpdateWorkflowOKBodyAO1
	var dataUpdateWorkflowOKBodyAO1 struct {
		Workflow *models.Workflow `json:"workflow,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataUpdateWorkflowOKBodyAO1); err != nil {
		return err
	}

	o.Workflow = dataUpdateWorkflowOKBodyAO1.Workflow

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o UpdateWorkflowOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	updateWorkflowOKBodyAO0, err := swag.WriteJSON(o.WorkflowEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, updateWorkflowOKBodyAO0)

	var dataUpdateWorkflowOKBodyAO1 struct {
		Workflow *models.Workflow `json:"workflow,omitempty"`
	}

	dataUpdateWorkflowOKBodyAO1.Workflow = o.Workflow

	jsonDataUpdateWorkflowOKBodyAO1, errUpdateWorkflowOKBodyAO1 := swag.WriteJSON(dataUpdateWorkflowOKBodyAO1)
	if errUpdateWorkflowOKBodyAO1 != nil {
		return nil, errUpdateWorkflowOKBodyAO1
	}
	_parts = append(_parts, jsonDataUpdateWorkflowOKBodyAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this update workflow o k body
func (o *UpdateWorkflowOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.WorkflowEntity
	if err := o.WorkflowEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateWorkflow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateWorkflowOKBody) validateWorkflow(formats strfmt.Registry) error {

	if swag.IsZero(o.Workflow) { // not required
		return nil
	}

	if o.Workflow != nil {
		if err := o.Workflow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateWorkflowOK" + "." + "workflow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateWorkflowOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateWorkflowOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateWorkflowOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
