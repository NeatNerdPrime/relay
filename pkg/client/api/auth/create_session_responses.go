// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// CreateSessionReader is a Reader for the CreateSession structure.
type CreateSessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateSessionCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewCreateSessionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateSessionCreated creates a CreateSessionCreated with default headers values
func NewCreateSessionCreated() *CreateSessionCreated {
	return &CreateSessionCreated{}
}

/*CreateSessionCreated handles this case with default header values.

Newly issued JWT token
*/
type CreateSessionCreated struct {
	Payload *CreateSessionCreatedBody
}

func (o *CreateSessionCreated) Error() string {
	return fmt.Sprintf("[POST /auth/sessions][%d] createSessionCreated  %+v", 201, o.Payload)
}

func (o *CreateSessionCreated) GetPayload() *CreateSessionCreatedBody {
	return o.Payload
}

func (o *CreateSessionCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateSessionCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSessionDefault creates a CreateSessionDefault with default headers values
func NewCreateSessionDefault(code int) *CreateSessionDefault {
	return &CreateSessionDefault{
		_statusCode: code,
	}
}

/*CreateSessionDefault handles this case with default header values.

An error occurred
*/
type CreateSessionDefault struct {
	_statusCode int

	Payload *CreateSessionDefaultBody
}

// Code gets the status code for the create session default response
func (o *CreateSessionDefault) Code() int {
	return o._statusCode
}

func (o *CreateSessionDefault) Error() string {
	return fmt.Sprintf("[POST /auth/sessions][%d] createSession default  %+v", o._statusCode, o.Payload)
}

func (o *CreateSessionDefault) GetPayload() *CreateSessionDefaultBody {
	return o.Payload
}

func (o *CreateSessionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateSessionDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateSessionBody Fields required to obtain a newly issued JWT for authentication
swagger:model CreateSessionBody
*/
type CreateSessionBody struct {

	// User email
	// Required: true
	Email *string `json:"email"`

	// User password
	// Required: true
	Password *string `json:"password"`
}

// Validate validates this create session body
func (o *CreateSessionBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSessionBody) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"email", "body", o.Email); err != nil {
		return err
	}

	return nil
}

func (o *CreateSessionBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSessionBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSessionBody) UnmarshalBinary(b []byte) error {
	var res CreateSessionBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateSessionCreatedBody Credentials for a new session
swagger:model CreateSessionCreatedBody
*/
type CreateSessionCreatedBody struct {

	// The authorization credential
	// Required: true
	Token *string `json:"token"`
}

// Validate validates this create session created body
func (o *CreateSessionCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSessionCreatedBody) validateToken(formats strfmt.Registry) error {

	if err := validate.Required("createSessionCreated"+"."+"token", "body", o.Token); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSessionCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSessionCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateSessionCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateSessionDefaultBody Error response
swagger:model CreateSessionDefaultBody
*/
type CreateSessionDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this create session default body
func (o *CreateSessionDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateSessionDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createSession default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateSessionDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateSessionDefaultBody) UnmarshalBinary(b []byte) error {
	var res CreateSessionDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
