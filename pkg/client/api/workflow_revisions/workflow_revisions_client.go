// Code generated by go-swagger; DO NOT EDIT.

package workflow_revisions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new workflow revisions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for workflow revisions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetLatestWorkflowRevision(params *GetLatestWorkflowRevisionParams, authInfo runtime.ClientAuthInfoWriter) (*GetLatestWorkflowRevisionOK, error)

	GetWorkflowRevision(params *GetWorkflowRevisionParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkflowRevisionOK, error)

	PostWorkflowRevision(params *PostWorkflowRevisionParams, authInfo runtime.ClientAuthInfoWriter) (*PostWorkflowRevisionCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetLatestWorkflowRevision retrieves the latest workflow revision
*/
func (a *Client) GetLatestWorkflowRevision(params *GetLatestWorkflowRevisionParams, authInfo runtime.ClientAuthInfoWriter) (*GetLatestWorkflowRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestWorkflowRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLatestWorkflowRevision",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflowName}/revisions/latest",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLatestWorkflowRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLatestWorkflowRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetLatestWorkflowRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetWorkflowRevision retrieves workflow revision
*/
func (a *Client) GetWorkflowRevision(params *GetWorkflowRevisionParams, authInfo runtime.ClientAuthInfoWriter) (*GetWorkflowRevisionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWorkflowRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWorkflowRevision",
		Method:             "GET",
		PathPattern:        "/api/workflows/{workflowName}/revisions/{workflowRevision}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWorkflowRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWorkflowRevisionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWorkflowRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostWorkflowRevision updates the workflow revision
*/
func (a *Client) PostWorkflowRevision(params *PostWorkflowRevisionParams, authInfo runtime.ClientAuthInfoWriter) (*PostWorkflowRevisionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostWorkflowRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postWorkflowRevision",
		Method:             "POST",
		PathPattern:        "/api/workflows/{workflowName}/revisions",
		ProducesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+json"},
		ConsumesMediaTypes: []string{"application/vnd.puppet.nebula.v20200131+yaml"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostWorkflowRevisionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostWorkflowRevisionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostWorkflowRevisionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
