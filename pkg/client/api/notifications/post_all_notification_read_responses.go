// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/puppetlabs/relay/pkg/client/api/models"
)

// PostAllNotificationReadReader is a Reader for the PostAllNotificationRead structure.
type PostAllNotificationReadReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostAllNotificationReadReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostAllNotificationReadOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPostAllNotificationReadDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostAllNotificationReadOK creates a PostAllNotificationReadOK with default headers values
func NewPostAllNotificationReadOK() *PostAllNotificationReadOK {
	return &PostAllNotificationReadOK{}
}

/*PostAllNotificationReadOK handles this case with default header values.

The operation completed successfully
*/
type PostAllNotificationReadOK struct {
	Payload *PostAllNotificationReadOKBody
}

func (o *PostAllNotificationReadOK) Error() string {
	return fmt.Sprintf("[POST /api/notifications/read][%d] postAllNotificationReadOK  %+v", 200, o.Payload)
}

func (o *PostAllNotificationReadOK) GetPayload() *PostAllNotificationReadOKBody {
	return o.Payload
}

func (o *PostAllNotificationReadOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostAllNotificationReadOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostAllNotificationReadDefault creates a PostAllNotificationReadDefault with default headers values
func NewPostAllNotificationReadDefault(code int) *PostAllNotificationReadDefault {
	return &PostAllNotificationReadDefault{
		_statusCode: code,
	}
}

/*PostAllNotificationReadDefault handles this case with default header values.

An error occurred
*/
type PostAllNotificationReadDefault struct {
	_statusCode int

	Payload *PostAllNotificationReadDefaultBody
}

// Code gets the status code for the post all notification read default response
func (o *PostAllNotificationReadDefault) Code() int {
	return o._statusCode
}

func (o *PostAllNotificationReadDefault) Error() string {
	return fmt.Sprintf("[POST /api/notifications/read][%d] postAllNotificationRead default  %+v", o._statusCode, o.Payload)
}

func (o *PostAllNotificationReadDefault) GetPayload() *PostAllNotificationReadDefaultBody {
	return o.Payload
}

func (o *PostAllNotificationReadDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PostAllNotificationReadDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostAllNotificationReadBody Field to list notification IDs
swagger:model PostAllNotificationReadBody
*/
type PostAllNotificationReadBody struct {

	// The list of notification IDs
	Ids []string `json:"ids"`
}

// Validate validates this post all notification read body
func (o *PostAllNotificationReadBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAllNotificationReadBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAllNotificationReadBody) UnmarshalBinary(b []byte) error {
	var res PostAllNotificationReadBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostAllNotificationReadDefaultBody Error response
swagger:model PostAllNotificationReadDefaultBody
*/
type PostAllNotificationReadDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this post all notification read default body
func (o *PostAllNotificationReadDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostAllNotificationReadDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postAllNotificationRead default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostAllNotificationReadDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAllNotificationReadDefaultBody) UnmarshalBinary(b []byte) error {
	var res PostAllNotificationReadDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PostAllNotificationReadOKBody Success response
swagger:model PostAllNotificationReadOKBody
*/
type PostAllNotificationReadOKBody struct {

	// Did this succeed?
	Success bool `json:"success,omitempty"`
}

// Validate validates this post all notification read o k body
func (o *PostAllNotificationReadOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostAllNotificationReadOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostAllNotificationReadOKBody) UnmarshalBinary(b []byte) error {
	var res PostAllNotificationReadOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
