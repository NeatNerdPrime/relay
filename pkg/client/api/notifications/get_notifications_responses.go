// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// GetNotificationsReader is a Reader for the GetNotifications structure.
type GetNotificationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetNotificationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetNotificationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetNotificationsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetNotificationsOK creates a GetNotificationsOK with default headers values
func NewGetNotificationsOK() *GetNotificationsOK {
	return &GetNotificationsOK{}
}

/*GetNotificationsOK handles this case with default header values.

The list of notifications
*/
type GetNotificationsOK struct {
	Payload *GetNotificationsOKBody
}

func (o *GetNotificationsOK) Error() string {
	return fmt.Sprintf("[GET /api/notifications][%d] getNotificationsOK  %+v", 200, o.Payload)
}

func (o *GetNotificationsOK) GetPayload() *GetNotificationsOKBody {
	return o.Payload
}

func (o *GetNotificationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNotificationsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetNotificationsDefault creates a GetNotificationsDefault with default headers values
func NewGetNotificationsDefault(code int) *GetNotificationsDefault {
	return &GetNotificationsDefault{
		_statusCode: code,
	}
}

/*GetNotificationsDefault handles this case with default header values.

An error occurred
*/
type GetNotificationsDefault struct {
	_statusCode int

	Payload *GetNotificationsDefaultBody
}

// Code gets the status code for the get notifications default response
func (o *GetNotificationsDefault) Code() int {
	return o._statusCode
}

func (o *GetNotificationsDefault) Error() string {
	return fmt.Sprintf("[GET /api/notifications][%d] getNotifications default  %+v", o._statusCode, o.Payload)
}

func (o *GetNotificationsDefault) GetPayload() *GetNotificationsDefaultBody {
	return o.Payload
}

func (o *GetNotificationsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetNotificationsDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetNotificationsDefaultBody Error response
swagger:model GetNotificationsDefaultBody
*/
type GetNotificationsDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get notifications default body
func (o *GetNotificationsDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNotificationsDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getNotifications default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNotificationsDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNotificationsDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetNotificationsDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetNotificationsOKBody get notifications o k body
swagger:model GetNotificationsOKBody
*/
type GetNotificationsOKBody struct {
	models.NotificationEntity

	// A list of notifications
	Notifications []*models.Notification `json:"notifications"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetNotificationsOKBody) UnmarshalJSON(raw []byte) error {
	// GetNotificationsOKBodyAO0
	var getNotificationsOKBodyAO0 models.NotificationEntity
	if err := swag.ReadJSON(raw, &getNotificationsOKBodyAO0); err != nil {
		return err
	}
	o.NotificationEntity = getNotificationsOKBodyAO0

	// GetNotificationsOKBodyAO1
	var dataGetNotificationsOKBodyAO1 struct {
		Notifications []*models.Notification `json:"notifications"`
	}
	if err := swag.ReadJSON(raw, &dataGetNotificationsOKBodyAO1); err != nil {
		return err
	}

	o.Notifications = dataGetNotificationsOKBodyAO1.Notifications

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetNotificationsOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getNotificationsOKBodyAO0, err := swag.WriteJSON(o.NotificationEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getNotificationsOKBodyAO0)
	var dataGetNotificationsOKBodyAO1 struct {
		Notifications []*models.Notification `json:"notifications"`
	}

	dataGetNotificationsOKBodyAO1.Notifications = o.Notifications

	jsonDataGetNotificationsOKBodyAO1, errGetNotificationsOKBodyAO1 := swag.WriteJSON(dataGetNotificationsOKBodyAO1)
	if errGetNotificationsOKBodyAO1 != nil {
		return nil, errGetNotificationsOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetNotificationsOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get notifications o k body
func (o *GetNotificationsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.NotificationEntity
	if err := o.NotificationEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetNotificationsOKBody) validateNotifications(formats strfmt.Registry) error {

	if swag.IsZero(o.Notifications) { // not required
		return nil
	}

	for i := 0; i < len(o.Notifications); i++ {
		if swag.IsZero(o.Notifications[i]) { // not required
			continue
		}

		if o.Notifications[i] != nil {
			if err := o.Notifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getNotificationsOK" + "." + "notifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetNotificationsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetNotificationsOKBody) UnmarshalBinary(b []byte) error {
	var res GetNotificationsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
