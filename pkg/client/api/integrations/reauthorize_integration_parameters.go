// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewReauthorizeIntegrationParams creates a new ReauthorizeIntegrationParams object
// with the default values initialized.
func NewReauthorizeIntegrationParams() *ReauthorizeIntegrationParams {
	var ()
	return &ReauthorizeIntegrationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewReauthorizeIntegrationParamsWithTimeout creates a new ReauthorizeIntegrationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewReauthorizeIntegrationParamsWithTimeout(timeout time.Duration) *ReauthorizeIntegrationParams {
	var ()
	return &ReauthorizeIntegrationParams{

		timeout: timeout,
	}
}

// NewReauthorizeIntegrationParamsWithContext creates a new ReauthorizeIntegrationParams object
// with the default values initialized, and the ability to set a context for a request
func NewReauthorizeIntegrationParamsWithContext(ctx context.Context) *ReauthorizeIntegrationParams {
	var ()
	return &ReauthorizeIntegrationParams{

		Context: ctx,
	}
}

// NewReauthorizeIntegrationParamsWithHTTPClient creates a new ReauthorizeIntegrationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewReauthorizeIntegrationParamsWithHTTPClient(client *http.Client) *ReauthorizeIntegrationParams {
	var ()
	return &ReauthorizeIntegrationParams{
		HTTPClient: client,
	}
}

/*ReauthorizeIntegrationParams contains all the parameters to send to the API endpoint
for the reauthorize integration operation typically these are written to a http.Request
*/
type ReauthorizeIntegrationParams struct {

	/*IntegrationID
	  The integration ID to reference

	*/
	IntegrationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the reauthorize integration params
func (o *ReauthorizeIntegrationParams) WithTimeout(timeout time.Duration) *ReauthorizeIntegrationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the reauthorize integration params
func (o *ReauthorizeIntegrationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the reauthorize integration params
func (o *ReauthorizeIntegrationParams) WithContext(ctx context.Context) *ReauthorizeIntegrationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the reauthorize integration params
func (o *ReauthorizeIntegrationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the reauthorize integration params
func (o *ReauthorizeIntegrationParams) WithHTTPClient(client *http.Client) *ReauthorizeIntegrationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the reauthorize integration params
func (o *ReauthorizeIntegrationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIntegrationID adds the integrationID to the reauthorize integration params
func (o *ReauthorizeIntegrationParams) WithIntegrationID(integrationID string) *ReauthorizeIntegrationParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the reauthorize integration params
func (o *ReauthorizeIntegrationParams) SetIntegrationID(integrationID string) {
	o.IntegrationID = integrationID
}

// WriteToRequest writes these params to a swagger request
func (o *ReauthorizeIntegrationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param integrationId
	if err := r.SetPathParam("integrationId", o.IntegrationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
