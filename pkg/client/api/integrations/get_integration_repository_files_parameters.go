// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetIntegrationRepositoryFilesParams creates a new GetIntegrationRepositoryFilesParams object
// with the default values initialized.
func NewGetIntegrationRepositoryFilesParams() *GetIntegrationRepositoryFilesParams {
	var ()
	return &GetIntegrationRepositoryFilesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIntegrationRepositoryFilesParamsWithTimeout creates a new GetIntegrationRepositoryFilesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIntegrationRepositoryFilesParamsWithTimeout(timeout time.Duration) *GetIntegrationRepositoryFilesParams {
	var ()
	return &GetIntegrationRepositoryFilesParams{

		timeout: timeout,
	}
}

// NewGetIntegrationRepositoryFilesParamsWithContext creates a new GetIntegrationRepositoryFilesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIntegrationRepositoryFilesParamsWithContext(ctx context.Context) *GetIntegrationRepositoryFilesParams {
	var ()
	return &GetIntegrationRepositoryFilesParams{

		Context: ctx,
	}
}

// NewGetIntegrationRepositoryFilesParamsWithHTTPClient creates a new GetIntegrationRepositoryFilesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIntegrationRepositoryFilesParamsWithHTTPClient(client *http.Client) *GetIntegrationRepositoryFilesParams {
	var ()
	return &GetIntegrationRepositoryFilesParams{
		HTTPClient: client,
	}
}

/*GetIntegrationRepositoryFilesParams contains all the parameters to send to the API endpoint
for the get integration repository files operation typically these are written to a http.Request
*/
type GetIntegrationRepositoryFilesParams struct {

	/*IntegrationID
	  The integration ID to reference

	*/
	IntegrationID string
	/*IntegrationRepositoryBranch
	  The repository branch to reference

	*/
	IntegrationRepositoryBranch string
	/*IntegrationRepositoryName
	  The repository name to reference

	*/
	IntegrationRepositoryName string
	/*IntegrationRepositoryOwner
	  The repository owner to reference

	*/
	IntegrationRepositoryOwner string
	/*Q
	  A search term for filtering the results of a file listing

	*/
	Q *string
	/*SourcePath
	  Path for which files will be enumerated

	*/
	SourcePath string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) WithTimeout(timeout time.Duration) *GetIntegrationRepositoryFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) WithContext(ctx context.Context) *GetIntegrationRepositoryFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) WithHTTPClient(client *http.Client) *GetIntegrationRepositoryFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIntegrationID adds the integrationID to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) WithIntegrationID(integrationID string) *GetIntegrationRepositoryFilesParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) SetIntegrationID(integrationID string) {
	o.IntegrationID = integrationID
}

// WithIntegrationRepositoryBranch adds the integrationRepositoryBranch to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) WithIntegrationRepositoryBranch(integrationRepositoryBranch string) *GetIntegrationRepositoryFilesParams {
	o.SetIntegrationRepositoryBranch(integrationRepositoryBranch)
	return o
}

// SetIntegrationRepositoryBranch adds the integrationRepositoryBranch to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) SetIntegrationRepositoryBranch(integrationRepositoryBranch string) {
	o.IntegrationRepositoryBranch = integrationRepositoryBranch
}

// WithIntegrationRepositoryName adds the integrationRepositoryName to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) WithIntegrationRepositoryName(integrationRepositoryName string) *GetIntegrationRepositoryFilesParams {
	o.SetIntegrationRepositoryName(integrationRepositoryName)
	return o
}

// SetIntegrationRepositoryName adds the integrationRepositoryName to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) SetIntegrationRepositoryName(integrationRepositoryName string) {
	o.IntegrationRepositoryName = integrationRepositoryName
}

// WithIntegrationRepositoryOwner adds the integrationRepositoryOwner to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) WithIntegrationRepositoryOwner(integrationRepositoryOwner string) *GetIntegrationRepositoryFilesParams {
	o.SetIntegrationRepositoryOwner(integrationRepositoryOwner)
	return o
}

// SetIntegrationRepositoryOwner adds the integrationRepositoryOwner to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) SetIntegrationRepositoryOwner(integrationRepositoryOwner string) {
	o.IntegrationRepositoryOwner = integrationRepositoryOwner
}

// WithQ adds the q to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) WithQ(q *string) *GetIntegrationRepositoryFilesParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) SetQ(q *string) {
	o.Q = q
}

// WithSourcePath adds the sourcePath to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) WithSourcePath(sourcePath string) *GetIntegrationRepositoryFilesParams {
	o.SetSourcePath(sourcePath)
	return o
}

// SetSourcePath adds the sourcePath to the get integration repository files params
func (o *GetIntegrationRepositoryFilesParams) SetSourcePath(sourcePath string) {
	o.SourcePath = sourcePath
}

// WriteToRequest writes these params to a swagger request
func (o *GetIntegrationRepositoryFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param integrationId
	if err := r.SetPathParam("integrationId", o.IntegrationID); err != nil {
		return err
	}

	// path param integrationRepositoryBranch
	if err := r.SetPathParam("integrationRepositoryBranch", o.IntegrationRepositoryBranch); err != nil {
		return err
	}

	// path param integrationRepositoryName
	if err := r.SetPathParam("integrationRepositoryName", o.IntegrationRepositoryName); err != nil {
		return err
	}

	// path param integrationRepositoryOwner
	if err := r.SetPathParam("integrationRepositoryOwner", o.IntegrationRepositoryOwner); err != nil {
		return err
	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	// query param source_path
	qrSourcePath := o.SourcePath
	qSourcePath := qrSourcePath
	if qSourcePath != "" {
		if err := r.SetQueryParam("source_path", qSourcePath); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
