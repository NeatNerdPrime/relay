// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// GetIntegrationRepositoriesReader is a Reader for the GetIntegrationRepositories structure.
type GetIntegrationRepositoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIntegrationRepositoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIntegrationRepositoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetIntegrationRepositoriesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIntegrationRepositoriesOK creates a GetIntegrationRepositoriesOK with default headers values
func NewGetIntegrationRepositoriesOK() *GetIntegrationRepositoriesOK {
	return &GetIntegrationRepositoriesOK{}
}

/*GetIntegrationRepositoriesOK handles this case with default header values.

A list of repositories matching the given criteria
*/
type GetIntegrationRepositoriesOK struct {
	Payload *GetIntegrationRepositoriesOKBody
}

func (o *GetIntegrationRepositoriesOK) Error() string {
	return fmt.Sprintf("[GET /api/integrations/{integrationId}/repositories/{integrationRepositoryOwner}][%d] getIntegrationRepositoriesOK  %+v", 200, o.Payload)
}

func (o *GetIntegrationRepositoriesOK) GetPayload() *GetIntegrationRepositoriesOKBody {
	return o.Payload
}

func (o *GetIntegrationRepositoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetIntegrationRepositoriesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationRepositoriesDefault creates a GetIntegrationRepositoriesDefault with default headers values
func NewGetIntegrationRepositoriesDefault(code int) *GetIntegrationRepositoriesDefault {
	return &GetIntegrationRepositoriesDefault{
		_statusCode: code,
	}
}

/*GetIntegrationRepositoriesDefault handles this case with default header values.

An error occurred
*/
type GetIntegrationRepositoriesDefault struct {
	_statusCode int

	Payload *GetIntegrationRepositoriesDefaultBody
}

// Code gets the status code for the get integration repositories default response
func (o *GetIntegrationRepositoriesDefault) Code() int {
	return o._statusCode
}

func (o *GetIntegrationRepositoriesDefault) Error() string {
	return fmt.Sprintf("[GET /api/integrations/{integrationId}/repositories/{integrationRepositoryOwner}][%d] getIntegrationRepositories default  %+v", o._statusCode, o.Payload)
}

func (o *GetIntegrationRepositoriesDefault) GetPayload() *GetIntegrationRepositoriesDefaultBody {
	return o.Payload
}

func (o *GetIntegrationRepositoriesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetIntegrationRepositoriesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetIntegrationRepositoriesDefaultBody Error response
swagger:model GetIntegrationRepositoriesDefaultBody
*/
type GetIntegrationRepositoriesDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get integration repositories default body
func (o *GetIntegrationRepositoriesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIntegrationRepositoriesDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getIntegrationRepositories default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIntegrationRepositoriesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIntegrationRepositoriesDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetIntegrationRepositoriesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetIntegrationRepositoriesOKBody The response type for listing repositories
swagger:model GetIntegrationRepositoriesOKBody
*/
type GetIntegrationRepositoriesOKBody struct {

	// A list of repositories
	Repositories []*models.Repository `json:"repositories"`
}

// Validate validates this get integration repositories o k body
func (o *GetIntegrationRepositoriesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRepositories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIntegrationRepositoriesOKBody) validateRepositories(formats strfmt.Registry) error {

	if swag.IsZero(o.Repositories) { // not required
		return nil
	}

	for i := 0; i < len(o.Repositories); i++ {
		if swag.IsZero(o.Repositories[i]) { // not required
			continue
		}

		if o.Repositories[i] != nil {
			if err := o.Repositories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getIntegrationRepositoriesOK" + "." + "repositories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIntegrationRepositoriesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIntegrationRepositoriesOKBody) UnmarshalBinary(b []byte) error {
	var res GetIntegrationRepositoriesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
