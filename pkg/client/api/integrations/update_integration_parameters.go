// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewUpdateIntegrationParams creates a new UpdateIntegrationParams object
// with the default values initialized.
func NewUpdateIntegrationParams() *UpdateIntegrationParams {
	var ()
	return &UpdateIntegrationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateIntegrationParamsWithTimeout creates a new UpdateIntegrationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateIntegrationParamsWithTimeout(timeout time.Duration) *UpdateIntegrationParams {
	var ()
	return &UpdateIntegrationParams{

		timeout: timeout,
	}
}

// NewUpdateIntegrationParamsWithContext creates a new UpdateIntegrationParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateIntegrationParamsWithContext(ctx context.Context) *UpdateIntegrationParams {
	var ()
	return &UpdateIntegrationParams{

		Context: ctx,
	}
}

// NewUpdateIntegrationParamsWithHTTPClient creates a new UpdateIntegrationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateIntegrationParamsWithHTTPClient(client *http.Client) *UpdateIntegrationParams {
	var ()
	return &UpdateIntegrationParams{
		HTTPClient: client,
	}
}

/*UpdateIntegrationParams contains all the parameters to send to the API endpoint
for the update integration operation typically these are written to a http.Request
*/
type UpdateIntegrationParams struct {

	/*Body
	  Integration info to update

	*/
	Body UpdateIntegrationBody
	/*IntegrationID
	  The integration ID to reference

	*/
	IntegrationID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update integration params
func (o *UpdateIntegrationParams) WithTimeout(timeout time.Duration) *UpdateIntegrationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update integration params
func (o *UpdateIntegrationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update integration params
func (o *UpdateIntegrationParams) WithContext(ctx context.Context) *UpdateIntegrationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update integration params
func (o *UpdateIntegrationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update integration params
func (o *UpdateIntegrationParams) WithHTTPClient(client *http.Client) *UpdateIntegrationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update integration params
func (o *UpdateIntegrationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update integration params
func (o *UpdateIntegrationParams) WithBody(body UpdateIntegrationBody) *UpdateIntegrationParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update integration params
func (o *UpdateIntegrationParams) SetBody(body UpdateIntegrationBody) {
	o.Body = body
}

// WithIntegrationID adds the integrationID to the update integration params
func (o *UpdateIntegrationParams) WithIntegrationID(integrationID string) *UpdateIntegrationParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the update integration params
func (o *UpdateIntegrationParams) SetIntegrationID(integrationID string) {
	o.IntegrationID = integrationID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateIntegrationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// path param integrationId
	if err := r.SetPathParam("integrationId", o.IntegrationID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
