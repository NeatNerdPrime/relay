// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/puppetlabs/relay/pkg/client/api/models"
)

// GetIntegrationReader is a Reader for the GetIntegration structure.
type GetIntegrationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIntegrationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIntegrationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetIntegrationDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIntegrationOK creates a GetIntegrationOK with default headers values
func NewGetIntegrationOK() *GetIntegrationOK {
	return &GetIntegrationOK{}
}

/*GetIntegrationOK handles this case with default header values.

An existing integration
*/
type GetIntegrationOK struct {
	Payload *GetIntegrationOKBody
}

func (o *GetIntegrationOK) Error() string {
	return fmt.Sprintf("[GET /api/integrations/{integrationId}][%d] getIntegrationOK  %+v", 200, o.Payload)
}

func (o *GetIntegrationOK) GetPayload() *GetIntegrationOKBody {
	return o.Payload
}

func (o *GetIntegrationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetIntegrationOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationDefault creates a GetIntegrationDefault with default headers values
func NewGetIntegrationDefault(code int) *GetIntegrationDefault {
	return &GetIntegrationDefault{
		_statusCode: code,
	}
}

/*GetIntegrationDefault handles this case with default header values.

An error occurred
*/
type GetIntegrationDefault struct {
	_statusCode int

	Payload *GetIntegrationDefaultBody
}

// Code gets the status code for the get integration default response
func (o *GetIntegrationDefault) Code() int {
	return o._statusCode
}

func (o *GetIntegrationDefault) Error() string {
	return fmt.Sprintf("[GET /api/integrations/{integrationId}][%d] getIntegration default  %+v", o._statusCode, o.Payload)
}

func (o *GetIntegrationDefault) GetPayload() *GetIntegrationDefaultBody {
	return o.Payload
}

func (o *GetIntegrationDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetIntegrationDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetIntegrationDefaultBody Error response
swagger:model GetIntegrationDefaultBody
*/
type GetIntegrationDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get integration default body
func (o *GetIntegrationDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIntegrationDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getIntegration default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIntegrationDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIntegrationDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetIntegrationDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetIntegrationOKBody get integration o k body
swagger:model GetIntegrationOKBody
*/
type GetIntegrationOKBody struct {
	models.IntegrationEntity

	// integration
	Integration *models.Integration `json:"integration,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *GetIntegrationOKBody) UnmarshalJSON(raw []byte) error {
	// GetIntegrationOKBodyAO0
	var getIntegrationOKBodyAO0 models.IntegrationEntity
	if err := swag.ReadJSON(raw, &getIntegrationOKBodyAO0); err != nil {
		return err
	}
	o.IntegrationEntity = getIntegrationOKBodyAO0

	// GetIntegrationOKBodyAO1
	var dataGetIntegrationOKBodyAO1 struct {
		Integration *models.Integration `json:"integration,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataGetIntegrationOKBodyAO1); err != nil {
		return err
	}

	o.Integration = dataGetIntegrationOKBodyAO1.Integration

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o GetIntegrationOKBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	getIntegrationOKBodyAO0, err := swag.WriteJSON(o.IntegrationEntity)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, getIntegrationOKBodyAO0)
	var dataGetIntegrationOKBodyAO1 struct {
		Integration *models.Integration `json:"integration,omitempty"`
	}

	dataGetIntegrationOKBodyAO1.Integration = o.Integration

	jsonDataGetIntegrationOKBodyAO1, errGetIntegrationOKBodyAO1 := swag.WriteJSON(dataGetIntegrationOKBodyAO1)
	if errGetIntegrationOKBodyAO1 != nil {
		return nil, errGetIntegrationOKBodyAO1
	}
	_parts = append(_parts, jsonDataGetIntegrationOKBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this get integration o k body
func (o *GetIntegrationOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.IntegrationEntity
	if err := o.IntegrationEntity.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateIntegration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIntegrationOKBody) validateIntegration(formats strfmt.Registry) error {

	if swag.IsZero(o.Integration) { // not required
		return nil
	}

	if o.Integration != nil {
		if err := o.Integration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getIntegrationOK" + "." + "integration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIntegrationOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIntegrationOKBody) UnmarshalBinary(b []byte) error {
	var res GetIntegrationOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
