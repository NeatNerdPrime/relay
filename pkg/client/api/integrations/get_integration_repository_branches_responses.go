// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/puppetlabs/nebula-cli/pkg/client/api/models"
)

// GetIntegrationRepositoryBranchesReader is a Reader for the GetIntegrationRepositoryBranches structure.
type GetIntegrationRepositoryBranchesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetIntegrationRepositoryBranchesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetIntegrationRepositoryBranchesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetIntegrationRepositoryBranchesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetIntegrationRepositoryBranchesOK creates a GetIntegrationRepositoryBranchesOK with default headers values
func NewGetIntegrationRepositoryBranchesOK() *GetIntegrationRepositoryBranchesOK {
	return &GetIntegrationRepositoryBranchesOK{}
}

/*GetIntegrationRepositoryBranchesOK handles this case with default header values.

A list of the branches matching the given criteria
*/
type GetIntegrationRepositoryBranchesOK struct {
	Payload *GetIntegrationRepositoryBranchesOKBody
}

func (o *GetIntegrationRepositoryBranchesOK) Error() string {
	return fmt.Sprintf("[GET /api/integrations/{integrationId}/repositories/{integrationRepositoryOwner}/{integrationRepositoryName}/branches][%d] getIntegrationRepositoryBranchesOK  %+v", 200, o.Payload)
}

func (o *GetIntegrationRepositoryBranchesOK) GetPayload() *GetIntegrationRepositoryBranchesOKBody {
	return o.Payload
}

func (o *GetIntegrationRepositoryBranchesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetIntegrationRepositoryBranchesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetIntegrationRepositoryBranchesDefault creates a GetIntegrationRepositoryBranchesDefault with default headers values
func NewGetIntegrationRepositoryBranchesDefault(code int) *GetIntegrationRepositoryBranchesDefault {
	return &GetIntegrationRepositoryBranchesDefault{
		_statusCode: code,
	}
}

/*GetIntegrationRepositoryBranchesDefault handles this case with default header values.

An error occurred
*/
type GetIntegrationRepositoryBranchesDefault struct {
	_statusCode int

	Payload *GetIntegrationRepositoryBranchesDefaultBody
}

// Code gets the status code for the get integration repository branches default response
func (o *GetIntegrationRepositoryBranchesDefault) Code() int {
	return o._statusCode
}

func (o *GetIntegrationRepositoryBranchesDefault) Error() string {
	return fmt.Sprintf("[GET /api/integrations/{integrationId}/repositories/{integrationRepositoryOwner}/{integrationRepositoryName}/branches][%d] getIntegrationRepositoryBranches default  %+v", o._statusCode, o.Payload)
}

func (o *GetIntegrationRepositoryBranchesDefault) GetPayload() *GetIntegrationRepositoryBranchesDefaultBody {
	return o.Payload
}

func (o *GetIntegrationRepositoryBranchesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetIntegrationRepositoryBranchesDefaultBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetIntegrationRepositoryBranchesDefaultBody Error response
swagger:model GetIntegrationRepositoryBranchesDefaultBody
*/
type GetIntegrationRepositoryBranchesDefaultBody struct {

	// error
	Error *models.Error `json:"error,omitempty"`
}

// Validate validates this get integration repository branches default body
func (o *GetIntegrationRepositoryBranchesDefaultBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIntegrationRepositoryBranchesDefaultBody) validateError(formats strfmt.Registry) error {

	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getIntegrationRepositoryBranches default" + "." + "error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIntegrationRepositoryBranchesDefaultBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIntegrationRepositoryBranchesDefaultBody) UnmarshalBinary(b []byte) error {
	var res GetIntegrationRepositoryBranchesDefaultBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*GetIntegrationRepositoryBranchesOKBody The response type for listing branches
swagger:model GetIntegrationRepositoryBranchesOKBody
*/
type GetIntegrationRepositoryBranchesOKBody struct {

	// A list of branches
	Branches []*models.RepositoryBranch `json:"branches"`
}

// Validate validates this get integration repository branches o k body
func (o *GetIntegrationRepositoryBranchesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateBranches(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetIntegrationRepositoryBranchesOKBody) validateBranches(formats strfmt.Registry) error {

	if swag.IsZero(o.Branches) { // not required
		return nil
	}

	for i := 0; i < len(o.Branches); i++ {
		if swag.IsZero(o.Branches[i]) { // not required
			continue
		}

		if o.Branches[i] != nil {
			if err := o.Branches[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getIntegrationRepositoryBranchesOK" + "." + "branches" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetIntegrationRepositoryBranchesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetIntegrationRepositoryBranchesOKBody) UnmarshalBinary(b []byte) error {
	var res GetIntegrationRepositoryBranchesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
