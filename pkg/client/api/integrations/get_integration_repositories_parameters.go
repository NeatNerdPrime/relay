// Code generated by go-swagger; DO NOT EDIT.

package integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetIntegrationRepositoriesParams creates a new GetIntegrationRepositoriesParams object
// with the default values initialized.
func NewGetIntegrationRepositoriesParams() *GetIntegrationRepositoriesParams {
	var ()
	return &GetIntegrationRepositoriesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetIntegrationRepositoriesParamsWithTimeout creates a new GetIntegrationRepositoriesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetIntegrationRepositoriesParamsWithTimeout(timeout time.Duration) *GetIntegrationRepositoriesParams {
	var ()
	return &GetIntegrationRepositoriesParams{

		timeout: timeout,
	}
}

// NewGetIntegrationRepositoriesParamsWithContext creates a new GetIntegrationRepositoriesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetIntegrationRepositoriesParamsWithContext(ctx context.Context) *GetIntegrationRepositoriesParams {
	var ()
	return &GetIntegrationRepositoriesParams{

		Context: ctx,
	}
}

// NewGetIntegrationRepositoriesParamsWithHTTPClient creates a new GetIntegrationRepositoriesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetIntegrationRepositoriesParamsWithHTTPClient(client *http.Client) *GetIntegrationRepositoriesParams {
	var ()
	return &GetIntegrationRepositoriesParams{
		HTTPClient: client,
	}
}

/*GetIntegrationRepositoriesParams contains all the parameters to send to the API endpoint
for the get integration repositories operation typically these are written to a http.Request
*/
type GetIntegrationRepositoriesParams struct {

	/*IntegrationID
	  The integration ID to reference

	*/
	IntegrationID string
	/*IntegrationRepositoryOwner
	  The repository owner to reference

	*/
	IntegrationRepositoryOwner string
	/*Q
	  A search term for filtering the results of a repository listing

	*/
	Q *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get integration repositories params
func (o *GetIntegrationRepositoriesParams) WithTimeout(timeout time.Duration) *GetIntegrationRepositoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get integration repositories params
func (o *GetIntegrationRepositoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get integration repositories params
func (o *GetIntegrationRepositoriesParams) WithContext(ctx context.Context) *GetIntegrationRepositoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get integration repositories params
func (o *GetIntegrationRepositoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get integration repositories params
func (o *GetIntegrationRepositoriesParams) WithHTTPClient(client *http.Client) *GetIntegrationRepositoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get integration repositories params
func (o *GetIntegrationRepositoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIntegrationID adds the integrationID to the get integration repositories params
func (o *GetIntegrationRepositoriesParams) WithIntegrationID(integrationID string) *GetIntegrationRepositoriesParams {
	o.SetIntegrationID(integrationID)
	return o
}

// SetIntegrationID adds the integrationId to the get integration repositories params
func (o *GetIntegrationRepositoriesParams) SetIntegrationID(integrationID string) {
	o.IntegrationID = integrationID
}

// WithIntegrationRepositoryOwner adds the integrationRepositoryOwner to the get integration repositories params
func (o *GetIntegrationRepositoriesParams) WithIntegrationRepositoryOwner(integrationRepositoryOwner string) *GetIntegrationRepositoriesParams {
	o.SetIntegrationRepositoryOwner(integrationRepositoryOwner)
	return o
}

// SetIntegrationRepositoryOwner adds the integrationRepositoryOwner to the get integration repositories params
func (o *GetIntegrationRepositoriesParams) SetIntegrationRepositoryOwner(integrationRepositoryOwner string) {
	o.IntegrationRepositoryOwner = integrationRepositoryOwner
}

// WithQ adds the q to the get integration repositories params
func (o *GetIntegrationRepositoriesParams) WithQ(q *string) *GetIntegrationRepositoriesParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the get integration repositories params
func (o *GetIntegrationRepositoriesParams) SetQ(q *string) {
	o.Q = q
}

// WriteToRequest writes these params to a swagger request
func (o *GetIntegrationRepositoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param integrationId
	if err := r.SetPathParam("integrationId", o.IntegrationID); err != nil {
		return err
	}

	// path param integrationRepositoryOwner
	if err := r.SetPathParam("integrationRepositoryOwner", o.IntegrationRepositoryOwner); err != nil {
		return err
	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
